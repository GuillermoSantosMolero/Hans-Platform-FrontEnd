{"ast":null,"code":"var _jsxFileName = \"C:\\\\VISILAB\\\\Hans\\\\HANS-Platform\\\\client\\\\src\\\\components\\\\admin\\\\AdminInterface.jsx\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useState, useRef } from \"react\";\nimport './AdminInterface.css';\nimport { Session, SessionStatus } from '../../context/Session';\nimport { QuestionStatus } from '../../context/Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminInterface(_ref) {\n  _s();\n  let {\n    username,\n    password,\n    questions,\n    sessions,\n    onSessionCreated\n  } = _ref;\n  const [selectedSession, setSelectedSession] = useState({\n    id: \"0\",\n    duration: 0,\n    question_id: \"\",\n    status: \"\"\n  });\n  const [participantList, setParticipantList] = useState(null);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\n  const [question, setQuestion] = useState({\n    status: QuestionStatus.Undefined\n  });\n  useEffect(() => {\n    if (sessions) {\n      setSelectedSession(sessions[0]);\n      if (questions) setSelectedSession({\n        ...selectedSession,\n        question_id: questions[0].id\n      });\n    }\n  }, [questions]);\n  useEffect(() => {\n    if (parseInt(selectedSession.id) !== 0) {\n      console.log(selectedSession.id);\n      setCurrentSession(new Session(selectedSession.id, 0, controlMessage => {\n        if (controlMessage.participant !== 0) {\n          setParticipantList(participantList => {\n            // if (!participantList.includes(controlMessage.participant)) {\n            //   const updatedList = [...participantList, controlMessage.participant];\n            //   console.log(updatedList);\n            //   return updatedList;\n            // }\n            fetch(`/api/session/${selectedSession.id}/participants`, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                user: username,\n                pass: password\n              })\n            }).then(res => {\n              if (res.status === 200) {\n                res.json().then(data => {\n                  return data;\n                });\n              } else {\n                res.text().then(msg => console.log(msg));\n              }\n            }).catch(error => {\n              console.log(error);\n            });\n          });\n        }\n      }));\n    }\n  }, [selectedSession]);\n  const handleSessionChange = event => {\n    const sessionId = parseInt(event.target.value);\n    const session = sessions.find(s => s.id === sessionId);\n    session.question_id = selectedSession.question_id;\n    session.duration = selectedSession.duration;\n    setSelectedSession(session);\n  };\n  const handleQuestionChange = event => {\n    setSelectedSession({\n      ...selectedSession,\n      question_id: event.target.value\n    });\n  };\n  const createSession = event => {\n    fetch(`/api/createSession`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: username,\n        pass: password\n      })\n    }).then(res => {\n      if (res.status === 200) {\n        res.json().then(data => {\n          onSessionCreated(data);\n        });\n      } else {\n        res.text().then(msg => console.log(msg));\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sessionlist\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSessionChange,\n        children: sessions && sessions.map(session => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: session.id,\n          children: [\"Session \", session.id]\n        }, session.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createSession,\n        children: \"New Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sessiondetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        readOnly: true,\n        value: selectedSession && selectedSession.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Duration:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedSession && selectedSession.duration || \"\",\n        onChange: e => setSelectedSession({\n          ...selectedSession,\n          duration: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleQuestionChange,\n        children: questions && questions.map(question => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: question.id,\n          children: question.prompt\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startsession\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        readOnly: true,\n        value: participantList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminInterface, \"JiTgYtM9DFgQDpH9wlYfGADLGmg=\");\n_c = AdminInterface;\nvar _c;\n$RefreshReg$(_c, \"AdminInterface\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Session","SessionStatus","QuestionStatus","AdminInterface","username","password","questions","sessions","onSessionCreated","selectedSession","setSelectedSession","id","duration","question_id","status","participantList","setParticipantList","currentSession","setCurrentSession","sessionStatus","setSessionStatus","Joining","question","setQuestion","Undefined","parseInt","console","log","controlMessage","participant","fetch","method","headers","body","JSON","stringify","user","pass","then","res","json","data","text","msg","catch","error","handleSessionChange","event","sessionId","target","value","session","find","s","handleQuestionChange","createSession","map","e","prompt"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/components/admin/AdminInterface.jsx"],"sourcesContent":["import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport './AdminInterface.css';\r\nimport { Session, SessionStatus } from '../../context/Session';\r\nimport { QuestionStatus } from '../../context/Question';\r\n\r\nexport default function AdminInterface({ username, password, questions, sessions, onSessionCreated }) {\r\n  const [selectedSession, setSelectedSession] = useState({ id: \"0\", duration: 0, question_id: \"\", status: \"\" });\r\n  const [participantList, setParticipantList] = useState(null);\r\n  const [currentSession, setCurrentSession] = useState(null);\r\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\r\n  const [question, setQuestion] = useState({ status: QuestionStatus.Undefined });\r\n\r\n  useEffect(() => {\r\n    if (sessions) {\r\n      setSelectedSession(sessions[0]);\r\n      if (questions)\r\n        setSelectedSession({ ...selectedSession, question_id: questions[0].id })\r\n    }\r\n  }, [questions]);\r\n\r\n  useEffect(() => {\r\n    if (parseInt(selectedSession.id) !== 0) {\r\n      console.log(selectedSession.id);\r\n      setCurrentSession(new Session(selectedSession.id, 0,\r\n        (controlMessage) => {\r\n          if (controlMessage.participant !== 0) {\r\n            setParticipantList(participantList => {\r\n              // if (!participantList.includes(controlMessage.participant)) {\r\n              //   const updatedList = [...participantList, controlMessage.participant];\r\n              //   console.log(updatedList);\r\n              //   return updatedList;\r\n              // }\r\n              fetch(\r\n                `/api/session/${selectedSession.id}/participants`,\r\n                {\r\n                  method: 'POST',\r\n                  headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(\r\n                    {\r\n                      user: username,\r\n                      pass: password\r\n                    }\r\n                  )\r\n                }\r\n              ).then(res => {\r\n                if (res.status === 200) {\r\n                  res.json().then(data => {\r\n                    return data;\r\n                  });\r\n                } else {\r\n                  res.text().then(msg => console.log(msg));\r\n                }\r\n              }).catch(error => {\r\n                console.log(error);\r\n              });\r\n            });\r\n          }\r\n        }\r\n      ));\r\n    }\r\n  }, [selectedSession]);\r\n\r\n\r\n  const handleSessionChange = (event) => {\r\n    const sessionId = parseInt(event.target.value);\r\n    const session = sessions.find(s => s.id === sessionId);\r\n    session.question_id = selectedSession.question_id;\r\n    session.duration = selectedSession.duration;\r\n    setSelectedSession(session);\r\n  }\r\n  const handleQuestionChange = (event) => {\r\n    setSelectedSession({ ...selectedSession, question_id: event.target.value });\r\n  }\r\n  const createSession = (event) => {\r\n    fetch(\r\n      `/api/createSession`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        )\r\n      }\r\n    ).then(res => {\r\n      if (res.status === 200) {\r\n        res.json().then(data => {\r\n          onSessionCreated(data);\r\n        });\r\n      } else {\r\n        res.text().then(msg => console.log(msg));\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"sessionlist\">\r\n\r\n        <select onChange={handleSessionChange}>\r\n          {sessions && sessions.map(session => (\r\n            <option key={session.id} value={session.id}>Session {session.id}</option>\r\n          ))}\r\n        </select>\r\n        <button onClick={createSession}>New Session</button>\r\n      </div>\r\n      <div className=\"sessiondetails\">\r\n        <label>Id:</label>\r\n        <input type=\"text\" readOnly value={selectedSession && selectedSession.id} />\r\n        <label>Duration:</label>\r\n        <input type=\"text\" value={selectedSession && selectedSession.duration || \"\"} onChange={e => setSelectedSession({ ...selectedSession, duration: e.target.value })} />\r\n        <label>Question:</label>\r\n        <select onChange={handleQuestionChange}>\r\n          {questions && questions.map(question => (\r\n            <option key={question.id} value={question.id}>{question.prompt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"startsession\" >\r\n        <button>Start</button>\r\n        <input type=\"text\" readOnly value={participantList} />\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}