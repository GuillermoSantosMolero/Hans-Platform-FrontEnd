{"ast":null,"code":"class Countdown {\n  constructor() {\n    this.iniciarTemporizador = (minutos, segundos) => {\n      if (fechaFuturo) {\n        fechaFuturo = new Date(new Date().getTime() + diferenciaTemporal);\n        diferenciaTemporal = 0;\n      } else {\n        const milisegundos = (segundos + minutos * 60) * 1000;\n        fechaFuturo = new Date(new Date().getTime() + milisegundos);\n      }\n      clearInterval(idInterval);\n      idInterval = setInterval(() => {\n        const tiempoRestante = fechaFuturo.getTime() - new Date().getTime();\n        if (tiempoRestante <= 0) {\n          console.log(\"Tiempo terminado\");\n          clearInterval(idInterval);\n        } else {\n          $tiempoRestante.textContent = milisegundosAMinutosYSegundos(tiempoRestante);\n        }\n      }, 50);\n    };\n    this.pausarTemporizador = () => {\n      diferenciaTemporal = fechaFuturo.getTime() - new Date().getTime();\n      clearInterval(idInterval);\n    };\n    this.detenerTemporizador = () => {\n      clearInterval(idInterval);\n      fechaFuturo = null;\n      diferenciaTemporal = 0;\n      sonido.currentTime = 0;\n      sonido.pause();\n      $tiempoRestante.textContent = \"00:00.0\";\n      init();\n    };\n    this.agregarCeroSiEsNecesario = valor => {\n      if (valor < 10) {\n        return \"0\" + valor;\n      } else {\n        return \"\" + valor;\n      }\n    };\n    this.milisegundosAMinutosYSegundos = milisegundos => {\n      const minutos = parseInt(milisegundos / 1000 / 60);\n      milisegundos -= minutos * 60 * 1000;\n      segundos = milisegundos / 1000;\n      return `${agregarCeroSiEsNecesario(minutos)}:${agregarCeroSiEsNecesario(segundos.toFixed(1))}`;\n    };\n  }\n}\nexport { Countdown };","map":{"version":3,"names":["Countdown","iniciarTemporizador","minutos","segundos","fechaFuturo","Date","getTime","diferenciaTemporal","milisegundos","clearInterval","idInterval","setInterval","tiempoRestante","console","log","$tiempoRestante","textContent","milisegundosAMinutosYSegundos","pausarTemporizador","detenerTemporizador","sonido","currentTime","pause","init","agregarCeroSiEsNecesario","valor","parseInt","toFixed"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/context/Countdown.js"],"sourcesContent":["class Countdown {\r\n    iniciarTemporizador = (minutos, segundos) => {\r\n        if (fechaFuturo) {\r\n            fechaFuturo = new Date(new Date().getTime() + diferenciaTemporal);\r\n            diferenciaTemporal = 0;\r\n        } else {\r\n            const milisegundos = (segundos + (minutos * 60)) * 1000;\r\n            fechaFuturo = new Date(new Date().getTime() + milisegundos);\r\n        }\r\n        clearInterval(idInterval);\r\n        idInterval = setInterval(() => {\r\n            const tiempoRestante = fechaFuturo.getTime() - new Date().getTime();\r\n            if (tiempoRestante <= 0) {\r\n                console.log(\"Tiempo terminado\");\r\n                clearInterval(idInterval);\r\n            } else {\r\n                $tiempoRestante.textContent = milisegundosAMinutosYSegundos(tiempoRestante);\r\n            }\r\n        }, 50);\r\n    };\r\n\r\n    pausarTemporizador = () => {\r\n        diferenciaTemporal = fechaFuturo.getTime() - new Date().getTime();\r\n        clearInterval(idInterval);\r\n    };\r\n\r\n    detenerTemporizador = () => {\r\n        clearInterval(idInterval);\r\n        fechaFuturo = null;\r\n        diferenciaTemporal = 0;\r\n        sonido.currentTime = 0;\r\n        sonido.pause();\r\n        $tiempoRestante.textContent = \"00:00.0\";\r\n        init();\r\n    }\r\n\r\n    agregarCeroSiEsNecesario = valor => {\r\n        if (valor < 10) {\r\n            return \"0\" + valor;\r\n        } else {\r\n            return \"\" + valor;\r\n        }\r\n    }\r\n    milisegundosAMinutosYSegundos = (milisegundos) => {\r\n        const minutos = parseInt(milisegundos / 1000 / 60);\r\n        milisegundos -= minutos * 60 * 1000;\r\n        segundos = (milisegundos / 1000);\r\n        return `${agregarCeroSiEsNecesario(minutos)}:${agregarCeroSiEsNecesario(segundos.toFixed(1))}`;\r\n    }\r\n}\r\nexport {Countdown}"],"mappings":"AAAA,MAAMA,SAAS,CAAC;EAAA;IAAA,KACZC,mBAAmB,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;MACzC,IAAIC,WAAW,EAAE;QACbA,WAAW,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGC,kBAAkB,CAAC;QACjEA,kBAAkB,GAAG,CAAC;MAC1B,CAAC,MAAM;QACH,MAAMC,YAAY,GAAG,CAACL,QAAQ,GAAID,OAAO,GAAG,EAAG,IAAI,IAAI;QACvDE,WAAW,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGE,YAAY,CAAC;MAC/D;MACAC,aAAa,CAACC,UAAU,CAAC;MACzBA,UAAU,GAAGC,WAAW,CAAC,MAAM;QAC3B,MAAMC,cAAc,GAAGR,WAAW,CAACE,OAAO,EAAE,GAAG,IAAID,IAAI,EAAE,CAACC,OAAO,EAAE;QACnE,IAAIM,cAAc,IAAI,CAAC,EAAE;UACrBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/BL,aAAa,CAACC,UAAU,CAAC;QAC7B,CAAC,MAAM;UACHK,eAAe,CAACC,WAAW,GAAGC,6BAA6B,CAACL,cAAc,CAAC;QAC/E;MACJ,CAAC,EAAE,EAAE,CAAC;IACV,CAAC;IAAA,KAEDM,kBAAkB,GAAG,MAAM;MACvBX,kBAAkB,GAAGH,WAAW,CAACE,OAAO,EAAE,GAAG,IAAID,IAAI,EAAE,CAACC,OAAO,EAAE;MACjEG,aAAa,CAACC,UAAU,CAAC;IAC7B,CAAC;IAAA,KAEDS,mBAAmB,GAAG,MAAM;MACxBV,aAAa,CAACC,UAAU,CAAC;MACzBN,WAAW,GAAG,IAAI;MAClBG,kBAAkB,GAAG,CAAC;MACtBa,MAAM,CAACC,WAAW,GAAG,CAAC;MACtBD,MAAM,CAACE,KAAK,EAAE;MACdP,eAAe,CAACC,WAAW,GAAG,SAAS;MACvCO,IAAI,EAAE;IACV,CAAC;IAAA,KAEDC,wBAAwB,GAAGC,KAAK,IAAI;MAChC,IAAIA,KAAK,GAAG,EAAE,EAAE;QACZ,OAAO,GAAG,GAAGA,KAAK;MACtB,CAAC,MAAM;QACH,OAAO,EAAE,GAAGA,KAAK;MACrB;IACJ,CAAC;IAAA,KACDR,6BAA6B,GAAIT,YAAY,IAAK;MAC9C,MAAMN,OAAO,GAAGwB,QAAQ,CAAClB,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;MAClDA,YAAY,IAAIN,OAAO,GAAG,EAAE,GAAG,IAAI;MACnCC,QAAQ,GAAIK,YAAY,GAAG,IAAK;MAChC,OAAQ,GAAEgB,wBAAwB,CAACtB,OAAO,CAAE,IAAGsB,wBAAwB,CAACrB,QAAQ,CAACwB,OAAO,CAAC,CAAC,CAAC,CAAE,EAAC;IAClG,CAAC;EAAA;AACL;AACA,SAAQ3B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}