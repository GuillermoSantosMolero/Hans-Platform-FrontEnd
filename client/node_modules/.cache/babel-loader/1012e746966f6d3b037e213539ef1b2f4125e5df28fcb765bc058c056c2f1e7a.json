{"ast":null,"code":"var _jsxFileName = \"C:\\\\VISILAB\\\\Hans\\\\HANS-Platform\\\\client\\\\src\\\\components\\\\BoardView.jsx\",\n  _s = $RefreshSig$();\nimport { React, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BoardView(_ref) {\n  _s();\n  let {\n    answers,\n    centralCuePosition,\n    peerMagnetPositions,\n    userMagnetPosition,\n    onUserMagnetMove,\n    debugView = false\n  } = _ref;\n  const svg = useRef();\n  const magnetSize = 30;\n  const halfMagnetSize = magnetSize / 2;\n  const answersRadius = 430;\n  const answersTextRadius = answersRadius + 25;\n  let answerPoints = [];\n  let answersText = [];\n  for (let i = 0, angle = -Math.PI / 2; i < answers.length; i++, angle += 2 * Math.PI / answers.length) {\n    answerPoints.push({\n      x: ~~(answersRadius * Math.cos(angle)),\n      y: ~~(answersRadius * Math.sin(angle))\n    });\n    answersText.push({\n      x: ~~(answersTextRadius * Math.cos(angle)),\n      y: ~~(answersTextRadius * Math.sin(angle)),\n      text: answers[i]\n    });\n  }\n  const distance = (a, b) => {\n    let x = a.x - b.x,\n      y = a.y - b.y;\n    return Math.sqrt(x * x + y * y);\n  };\n  const getClosestAnswers = point => {\n    let answerDistances = answerPoints.map(answerPoint => distance(answerPoint, point));\n    return [...answerDistances.keys()].sort((a, b) => answerDistances[a] - answerDistances[b]);\n  };\n  const normalizePosition = point => {\n    if (answerPoints.length < 2) return new Array(answerPoints.length).fill(0);\n    // The position is normalized by decomposing the point into the two closest answers\n    // Being `v1 = (a, b)` and `v2 = (c, d)` the vectors that represent the two closest answers\n    // Their weights are calculated solving the following system of equations:\n    //    a * w1 + b * w2 = x\n    //    c * w1 + d * w2 = y\n\n    // Get the indices of the two closest answers\n    let closestAnswerIndices = getClosestAnswers(point);\n\n    // Get the (X, Y) values of the vectors corresponding to those answers\n    let a = answerPoints[closestAnswerIndices[0]].x,\n      b = answerPoints[closestAnswerIndices[0]].y;\n    let c = answerPoints[closestAnswerIndices[1]].x,\n      d = answerPoints[closestAnswerIndices[1]].y;\n\n    // Assign the calculated weigths to the respective positions in the normalized position\n    let norm = new Array(answers.length).fill(0);\n    const denominator = c * b - a * d;\n    if (denominator === 0) {\n      // Will happen in some cases (i.e. when there are 2 answers so the answer vectors are parallel)\n      norm[closestAnswerIndices[0]] = point.y / b;\n    } else {\n      norm[closestAnswerIndices[0]] = -(d * point.x - c * point.y) / denominator;\n      norm[closestAnswerIndices[1]] = (b * point.x - a * point.y) / denominator;\n    }\n    return norm;\n  };\n  const denormalizePosition = position => position.length !== answerPoints.length || answerPoints.length < 2 ? {\n    x: 0,\n    y: 0\n  } : {\n    x: answerPoints.map((answerPoint, i) => answerPoint.x * position[i]).reduce((sum, val) => sum + val),\n    y: answerPoints.map((answerPoint, i) => answerPoint.y * position[i]).reduce((sum, val) => sum + val)\n  };\n  const startDrag = event => {\n    event.preventDefault();\n    const mousemove = event => {\n      event.preventDefault();\n      let cursorPoint = svg.current.createSVGPoint();\n      cursorPoint.x = event.clientX;\n      cursorPoint.y = event.clientY;\n      cursorPoint = cursorPoint.matrixTransform(svg.current.getScreenCTM().inverse());\n      const position = {\n        x: Math.min(Math.max(cursorPoint.x, -500), 500),\n        y: Math.min(Math.max(cursorPoint.y, -500), 500)\n      };\n      onUserMagnetMove({\n        x: position.x,\n        y: position.y,\n        norm: normalizePosition(position)\n      });\n    };\n    document.addEventListener(\"mousemove\", mousemove);\n    document.addEventListener(\"mouseup\", () => {\n      document.removeEventListener(\"mousemove\", mousemove);\n    }, {\n      once: true\n    });\n  };\n  const cuePosition = denormalizePosition(centralCuePosition);\n  const closestAnswerIndices = debugView ? getClosestAnswers(userMagnetPosition) : undefined;\n  const normalizedPosition = debugView ? normalizePosition(userMagnetPosition) : undefined;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svg,\n    viewBox: \"-500 -500 1000 1000\",\n    children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n      points: answerPoints.map(p => `${p.x},${p.y}`).join(' '),\n      stroke: \"blue\",\n      strokeWidth: \"5px\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), answerPoints.map((p, i) => /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: p.x,\n      cy: p.y,\n      r: \"20\",\n      fill: \"lightgreen\",\n      stroke: \"blue\",\n      strokeWidth: \"2\"\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)), answersText.map((anchor, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: anchor.x,\n      y: anchor.y,\n      fill: \"black\",\n      fontSize: \"30\",\n      textAnchor: anchor.x === 0 ? \"middle\" : anchor.x < 0 ? \"end\" : \"start\",\n      dominantBaseline: anchor.y === 0 ? \"middle\" : anchor.y < 0 ? \"ideographic\" : \"hanging\",\n      children: anchor.text\n    }, anchor.text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: cuePosition.x,\n      cy: cuePosition.y,\n      r: \"80\",\n      fill: \"#DDDDDD\",\n      stroke: \"black\",\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(-${halfMagnetSize}, -${halfMagnetSize})`,\n      children: peerMagnetPositions.map(normPosition => denormalizePosition(normPosition)).map((point, i) => /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: point.x,\n        y: point.y,\n        width: magnetSize,\n        height: magnetSize,\n        fill: \"#000000AA\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this),\n    // DEBUG VISUALIZATION (closest answers & arrows indicating answer relevance)\n    debugView && answerPoints.length >= 2 && /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrowhead\",\n          markerWidth: \"10\",\n          markerHeight: \"7\",\n          refX: \"0\",\n          refY: \"3.5\",\n          orient: \"auto\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"0 0, 10 3.5, 0 7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), answerPoints.map((answerPoint, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"0\",\n        y1: \"0\",\n        x2: answerPoint.x * (0.000001 + normalizedPosition[i]),\n        y2: answerPoint.y * (0.000001 + normalizedPosition[i]),\n        stroke: \"black\",\n        strokeWidth: \"4\",\n        markerEnd: \"url(#arrowhead)\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: userMagnetPosition.x,\n        y1: userMagnetPosition.y,\n        x2: \"0\",\n        y2: \"0\",\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: userMagnetPosition.x,\n        y1: userMagnetPosition.y,\n        x2: answerPoints[closestAnswerIndices[0]].x,\n        y2: answerPoints[closestAnswerIndices[0]].y,\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: userMagnetPosition.x,\n        y1: userMagnetPosition.y,\n        x2: answerPoints[closestAnswerIndices[1]].x,\n        y2: answerPoints[closestAnswerIndices[1]].y,\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this) /* END OF DEBUG VISUALIZATION */, /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: userMagnetPosition.x,\n      cy: userMagnetPosition.y,\n      r: magnetSize / 2,\n      fill: \"#FF0000\",\n      onMouseDown: startDrag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardView, \"zqrBtUzkXbC+niiR8G0dQib6Bes=\");\n_c = BoardView;\nvar _c;\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"names":["React","useRef","BoardView","answers","centralCuePosition","peerMagnetPositions","userMagnetPosition","onUserMagnetMove","debugView","svg","magnetSize","halfMagnetSize","answersRadius","answersTextRadius","answerPoints","answersText","i","angle","Math","PI","length","push","x","cos","y","sin","text","distance","a","b","sqrt","getClosestAnswers","point","answerDistances","map","answerPoint","keys","sort","normalizePosition","Array","fill","closestAnswerIndices","c","d","norm","denominator","denormalizePosition","position","reduce","sum","val","startDrag","event","preventDefault","mousemove","cursorPoint","current","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","min","max","document","addEventListener","removeEventListener","once","cuePosition","undefined","normalizedPosition","p","join","anchor","normPosition"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/components/BoardView.jsx"],"sourcesContent":["import { React, useRef } from \"react\";\r\n\r\nexport default function BoardView({\r\n  answers,\r\n  centralCuePosition, peerMagnetPositions,\r\n  userMagnetPosition, onUserMagnetMove,\r\n  debugView=false\r\n}) {\r\n  const svg = useRef();\r\n\r\n  const magnetSize = 30;\r\n  const halfMagnetSize = magnetSize / 2;\r\n  const answersRadius = 430;\r\n  const answersTextRadius = answersRadius + 25;\r\n  let answerPoints = [];\r\n  let answersText = [];\r\n  for(let i=0, angle = -Math.PI/2; i < answers.length; i++, angle += 2*Math.PI/answers.length) {\r\n    answerPoints.push({\r\n      x: ~~(answersRadius * Math.cos(angle)),\r\n      y: ~~(answersRadius * Math.sin(angle))\r\n    });\r\n    answersText.push({\r\n      x: ~~(answersTextRadius * Math.cos(angle)),\r\n      y: ~~(answersTextRadius * Math.sin(angle)),\r\n      text: answers[i]\r\n    });\r\n  }\r\n\r\n  const distance = (a, b) => {let x = a.x - b.x, y = a.y - b.y; return Math.sqrt(x*x + y*y); };\r\n  const getClosestAnswers = (point) => {\r\n    let answerDistances = answerPoints.map((answerPoint) => distance(answerPoint, point));\r\n    return [...answerDistances.keys()].sort((a,b) => answerDistances[a] - answerDistances[b]);\r\n  }\r\n  const normalizePosition = (point) => {\r\n    if(answerPoints.length < 2) return new Array(answerPoints.length).fill(0);\r\n    // The position is normalized by decomposing the point into the two closest answers\r\n    // Being `v1 = (a, b)` and `v2 = (c, d)` the vectors that represent the two closest answers\r\n    // Their weights are calculated solving the following system of equations:\r\n    //    a * w1 + b * w2 = x\r\n    //    c * w1 + d * w2 = y\r\n\r\n    // Get the indices of the two closest answers\r\n    let closestAnswerIndices = getClosestAnswers(point);\r\n\r\n    // Get the (X, Y) values of the vectors corresponding to those answers\r\n    let a = answerPoints[closestAnswerIndices[0]].x, b = answerPoints[closestAnswerIndices[0]].y;\r\n    let c = answerPoints[closestAnswerIndices[1]].x, d = answerPoints[closestAnswerIndices[1]].y;\r\n\r\n    // Assign the calculated weigths to the respective positions in the normalized position\r\n    let norm = new Array(answers.length).fill(0);\r\n    const denominator = c * b - a * d;\r\n    if(denominator === 0) {\r\n      // Will happen in some cases (i.e. when there are 2 answers so the answer vectors are parallel)\r\n      norm[closestAnswerIndices[0]] = point.y / b;\r\n    } else {\r\n      norm[closestAnswerIndices[0]] = -(d * point.x - c * point.y) / denominator;\r\n      norm[closestAnswerIndices[1]] =  (b * point.x - a * point.y) / denominator;\r\n    }\r\n    return norm;\r\n  };\r\n  const denormalizePosition = position => \r\n    (position.length !== answerPoints.length) || (answerPoints.length < 2)\r\n    ? {x: 0, y: 0}\r\n    : {\r\n      x: answerPoints.map((answerPoint, i) => answerPoint.x * position[i]).reduce((sum, val) => sum + val),\r\n      y: answerPoints.map((answerPoint, i) => answerPoint.y * position[i]).reduce((sum, val) => sum + val),\r\n    };\r\n\r\n  const startDrag = (event) => {\r\n    event.preventDefault();\r\n\r\n    const mousemove = (event) => {\r\n      event.preventDefault();\r\n\r\n      let cursorPoint = svg.current.createSVGPoint();\r\n      cursorPoint.x = event.clientX;\r\n      cursorPoint.y = event.clientY;\r\n      cursorPoint = cursorPoint.matrixTransform(svg.current.getScreenCTM().inverse());\r\n\r\n      const position = {\r\n        x: Math.min(Math.max(cursorPoint.x, -500), 500),\r\n        y: Math.min(Math.max(cursorPoint.y, -500), 500)\r\n      };\r\n      onUserMagnetMove({x: position.x, y: position.y, norm: normalizePosition(position)});\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", mousemove);\r\n    document.addEventListener(\"mouseup\", () => {\r\n      document.removeEventListener(\"mousemove\", mousemove);\r\n    }, { once: true });\r\n  }\r\n\r\n  const cuePosition = denormalizePosition(centralCuePosition);\r\n\r\n  const closestAnswerIndices = debugView ? getClosestAnswers(userMagnetPosition) : undefined;\r\n  const normalizedPosition = debugView ? normalizePosition(userMagnetPosition) : undefined;\r\n\r\n  return (\r\n    <svg ref={svg}\r\n      viewBox=\"-500 -500 1000 1000\"\r\n    >\r\n      <polygon\r\n        points={answerPoints.map((p) => `${p.x},${p.y}`).join(' ')}\r\n        stroke=\"blue\"\r\n        strokeWidth=\"5px\"\r\n        fill=\"none\"\r\n      />\r\n      {answerPoints.map((p, i) => (\r\n        <circle\r\n          key={i}\r\n          cx={p.x}\r\n          cy={p.y}\r\n          r=\"20\"\r\n          fill=\"lightgreen\"\r\n          stroke=\"blue\"\r\n          strokeWidth=\"2\"\r\n        />\r\n      ))}\r\n      {answersText.map((anchor, i) => (\r\n        <text\r\n          key={anchor.text}\r\n          x={anchor.x}\r\n          y={anchor.y}\r\n          fill=\"black\"\r\n          fontSize=\"30\"\r\n          textAnchor={anchor.x === 0 ? \"middle\" : (anchor.x < 0 ? \"end\" : \"start\")}\r\n          dominantBaseline={anchor.y === 0 ? \"middle\" : (anchor.y < 0 ? \"ideographic\" : \"hanging\")}\r\n        >\r\n          {anchor.text}\r\n        </text>\r\n      ))}\r\n      <circle\r\n        cx={cuePosition.x}\r\n        cy={cuePosition.y}\r\n        r=\"80\"\r\n        fill=\"#DDDDDD\"\r\n        stroke=\"black\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <g transform={`translate(-${halfMagnetSize}, -${halfMagnetSize})`}>\r\n        {peerMagnetPositions.map(normPosition => denormalizePosition(normPosition)).map((point, i) => (\r\n          <rect\r\n            key={i}\r\n            x={point.x}\r\n            y={point.y}\r\n            width={magnetSize}\r\n            height={magnetSize}\r\n            fill=\"#000000AA\"\r\n          />\r\n        ))}\r\n      </g>\r\n      { // DEBUG VISUALIZATION (closest answers & arrows indicating answer relevance)\r\n      debugView && answerPoints.length >= 2 && (\r\n      <g>\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n          refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n          </marker>\r\n        </defs>\r\n        {answerPoints.map((answerPoint, i) => (\r\n          <line\r\n          key={i}\r\n          x1='0'\r\n          y1='0'\r\n          x2={answerPoint.x * (0.000001 + normalizedPosition[i])}\r\n          y2={answerPoint.y * (0.000001 + normalizedPosition[i])}\r\n          stroke='black'\r\n          strokeWidth='4'\r\n          markerEnd=\"url(#arrowhead)\"\r\n        />\r\n        ))}\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2='0'\r\n          y2='0'\r\n          stroke='black'\r\n        />\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2={answerPoints[closestAnswerIndices[0]].x}\r\n          y2={answerPoints[closestAnswerIndices[0]].y}\r\n          stroke='black'\r\n        />\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2={answerPoints[closestAnswerIndices[1]].x}\r\n          y2={answerPoints[closestAnswerIndices[1]].y}\r\n          stroke='black'\r\n        />\r\n      </g>\r\n      ) /* END OF DEBUG VISUALIZATION */ }\r\n      <circle\r\n        cx={userMagnetPosition.x}\r\n        cy={userMagnetPosition.y}\r\n        r={magnetSize/2}\r\n        fill=\"#FF0000\"\r\n        onMouseDown={startDrag}\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}