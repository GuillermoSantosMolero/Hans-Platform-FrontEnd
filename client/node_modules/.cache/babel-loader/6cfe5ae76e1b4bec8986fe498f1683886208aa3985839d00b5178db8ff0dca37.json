{"ast":null,"code":"var _jsxFileName = \"C:\\\\VISILAB\\\\Hans\\\\HANS-Platform\\\\client\\\\src\\\\components\\\\admin\\\\AdminInterface.jsx\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useState } from \"react\";\nimport './AdminInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminInterface(_ref) {\n  _s();\n  let {\n    questions,\n    sessions\n  } = _ref;\n  const [selectedSession, setSelectedSession] = useState({\n    id: \"\",\n    duration: 0,\n    question_id: \"\",\n    status: \"\"\n  });\n  useEffect(() => {\n    if (sessions) {\n      setSelectedSession(sessions[0]);\n      if (questions) setSelectedSession({\n        ...selectedSession,\n        question_id: questions[0].id\n      });\n    }\n  }, [sessions], [questions]);\n  const handleSessionChange = event => {\n    const sessionId = parseInt(event.target.value);\n    const session = sessions.find(s => s.id === sessionId);\n    setSelectedSession(session);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sessionlist\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSessionChange,\n        children: sessions && sessions.map(session => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: session.id,\n          children: [\"Session \", session.id]\n        }, session.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"New Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sessiondetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Valor de sessions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(selectedSession, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        readOnly: true,\n        value: selectedSession && selectedSession.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Duration:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: selectedSession && selectedSession.duration,\n        onChange: e => setSelectedSession({\n          ...selectedSession,\n          duration: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: questions && questions.map(question => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: question.id,\n          children: question.prompt\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startsession\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminInterface, \"F7bRCjIM5iNggJYBgAUNRCEndAg=\");\n_c = AdminInterface;\nvar _c;\n$RefreshReg$(_c, \"AdminInterface\");","map":{"version":3,"names":["React","useEffect","useState","AdminInterface","questions","sessions","selectedSession","setSelectedSession","id","duration","question_id","status","handleSessionChange","event","sessionId","parseInt","target","value","session","find","s","map","JSON","stringify","e","question","prompt"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/components/admin/AdminInterface.jsx"],"sourcesContent":["import { React, useEffect, useState } from \"react\";\r\n\r\nimport './AdminInterface.css';\r\n\r\nexport default function AdminInterface({ questions, sessions }) {\r\n  const [selectedSession, setSelectedSession] = useState({ id: \"\", duration: 0, question_id: \"\", status: \"\" });\r\n  useEffect(() => {\r\n    if(sessions){\r\n      setSelectedSession(sessions[0]);\r\n      if(questions)\r\n        setSelectedSession({ ...selectedSession, question_id: questions[0].id})\r\n    }\r\n  },[sessions],[questions]);\r\n\r\n  const handleSessionChange = (event) => {\r\n    const sessionId = parseInt(event.target.value);\r\n    const session = sessions.find(s => s.id === sessionId);\r\n    setSelectedSession(session);\r\n  }\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"sessionlist\">\r\n\r\n        <select onChange={handleSessionChange}>\r\n          {sessions && sessions.map(session => (\r\n            <option key={session.id} value={session.id}>Session {session.id}</option>\r\n          ))}\r\n        </select>\r\n        <button>New Session</button>\r\n      </div>\r\n      <div className=\"sessiondetails\">\r\n        <div>\r\n          <p>Valor de sessions:</p>\r\n          <pre>{JSON.stringify(selectedSession, null, 2)}</pre>\r\n        </div>\r\n        <label>Id:</label>\r\n        <input type=\"text\" readOnly value={selectedSession && selectedSession.id} />\r\n        <label>Duration:</label>\r\n        <input type=\"text\" value={selectedSession && selectedSession.duration} onChange={e => setSelectedSession({ ...selectedSession, duration: e.target.value})}/>\r\n        <label>Question:</label>\r\n        <select>\r\n          {questions && questions.map(question => (\r\n            <option key={question.id} value={question.id}>{question.prompt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"startsession\">\r\n        <button>Start</button>\r\n        <input type=\"text\" readOnly />\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}