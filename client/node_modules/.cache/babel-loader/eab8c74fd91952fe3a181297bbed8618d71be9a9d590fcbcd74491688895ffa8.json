{"ast":null,"code":"import _classCallCheck from\"C:/VISILAB/Hans/HANS-Platform/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/VISILAB/Hans/HANS-Platform/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import mqtt from'precompiled-mqtt';var SessionStatus=Object.freeze({Joining:Symbol(\"joining\"),// Getting session info and subscribing to MQTT topics\nWaiting:Symbol(\"waiting\"),// Waiting for the question to be defined and loaded\nActive:Symbol(\"active\")// Answering the question, all users are interacting\n});var Session=/*#__PURE__*/function(){function Session(sessionId,participantId,controlCallback,updateCallback){var _this=this;_classCallCheck(this,Session);console.log(\"SESSION CONSTRUCTOR CALLED\");this.sessionId=sessionId;this.participantId=participantId;this.client=mqtt.connect(\"ws://\".concat(window.location.hostname,\":1883/\"),{clean:true,connectTimeout:4000});this.client.on('connect',function(){console.log('[MQTT] Client connected to broker');_this.client.subscribe([\"swarm/session/\".concat(sessionId,\"/control\"),\"swarm/session/\".concat(sessionId,\"/updates/+\")],function(err){if(!err)console.log(\"[MQTT] Subscribed to /swarm/session/#\");});});this.client.on('message',function(topic,message){//Guardamos los datos del topic y los spliteamos en un array de strings\nvar topic_data=topic.split('/',5);//Comprobamos que los datos tengan el formato correcto\nif(topic_data.length<4||topic_data[0]!=='swarm'||topic_data[1]!=='session'//Para comprobar que la posicion 2 no sea vacía\n||!topic_data[2].length//Comprueba que sea un numero ya que esta es la posicion del id de la session\n||isNaN(topic_data[2])){console.log(\"[MQTT] Invalid topic '\".concat(topic,\"'\"));return;}var sessionId=topic_data[2];if(sessionId!==_this.sessionId){console.log(\"[MQTT] Unknown session ID '\".concat(sessionId,\"'\"));return;}if(topic_data[3]==='control'){controlCallback(JSON.parse(message));}else if(topic_data[3]==='updates'){if(topic_data.length!==5){console.log('[MQTT] An update was received in a non-participant-specific topic');return;}var _participantId=topic_data[4];if(_participantId!==_this.participantId){// Discard self updates\nupdateCallback(_participantId,JSON.parse(message));}}});}//Para que el cliente publique un mensaje de control en el que incluirá datos en formato JSON\n_createClass(Session,[{key:\"publishControl\",value:function publishControl(controlMessage){console.log(controlMessage);this.client.publish(\"swarm/session/\".concat(this.sessionId,\"/control/\").concat(this.participantId),JSON.stringify(controlMessage));}//Para que el cliente publique un mensaje de actualización en el que incluirá datos en formato JSON\n//Típicamente estos datos harán referencia a la posición de la bolita de nuestro componenete BoardView\n},{key:\"publishUpdate\",value:function publishUpdate(updateMessage){this.client.publish(\"swarm/session/\".concat(this.sessionId,\"/updates/\").concat(this.participantId),JSON.stringify(updateMessage));}//Para cerrar la conexión\n},{key:\"close\",value:function close(){this.client.end();}}]);return Session;}();export{SessionStatus,Session};","map":{"version":3,"names":["mqtt","SessionStatus","Object","freeze","Joining","Symbol","Waiting","Active","Session","sessionId","participantId","controlCallback","updateCallback","console","log","client","connect","window","location","hostname","clean","connectTimeout","on","subscribe","err","topic","message","topic_data","split","length","isNaN","JSON","parse","controlMessage","publish","stringify","updateMessage","end"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/context/Session.js"],"sourcesContent":["\r\nimport mqtt from 'precompiled-mqtt';\r\n\r\nconst SessionStatus = Object.freeze({\r\n    Joining: Symbol(\"joining\"), // Getting session info and subscribing to MQTT topics\r\n    Waiting: Symbol(\"waiting\"), // Waiting for the question to be defined and loaded\r\n    Active: Symbol(\"active\"),   // Answering the question, all users are interacting\r\n});\r\n\r\nclass Session {\r\n    constructor(sessionId, participantId, controlCallback, updateCallback) {\r\n        console.log(\"SESSION CONSTRUCTOR CALLED\");\r\n        this.sessionId = sessionId;\r\n        this.participantId = participantId;\r\n\r\n        this.client = mqtt.connect(\r\n        `ws://${window.location.hostname}:1883/`,\r\n        {\r\n            clean: true,\r\n            connectTimeout: 4000,\r\n        }\r\n        );\r\n        this.client.on('connect', () => {\r\n        console.log('[MQTT] Client connected to broker');\r\n        this.client.subscribe([\r\n            `swarm/session/${sessionId}/control`,\r\n            `swarm/session/${sessionId}/updates/+`,\r\n        ], (err) => {\r\n            if(!err) console.log(\"[MQTT] Subscribed to /swarm/session/#\");\r\n        });\r\n        });\r\n        this.client.on('message', (topic, message) => {\r\n        //Guardamos los datos del topic y los spliteamos en un array de strings\r\n        const topic_data = topic.split('/', 5);\r\n        //Comprobamos que los datos tengan el formato correcto\r\n        if(\r\n            (topic_data.length < 4)\r\n            || (topic_data[0] !== 'swarm')\r\n            || (topic_data[1] !== 'session')\r\n            //Para comprobar que la posicion 2 no sea vacía\r\n            || !topic_data[2].length \r\n            //Comprueba que sea un numero ya que esta es la posicion del id de la session\r\n            || isNaN(topic_data[2])\r\n        ) {\r\n            console.log(`[MQTT] Invalid topic '${topic}'`);\r\n            return;\r\n        }\r\n\r\n        const sessionId = topic_data[2];\r\n        if(sessionId !== this.sessionId) {\r\n            console.log(`[MQTT] Unknown session ID '${sessionId}'`);\r\n            return;\r\n        }\r\n\r\n        if(topic_data[3] === 'control') {\r\n            controlCallback(JSON.parse(message));\r\n        }\r\n        else if(topic_data[3] === 'updates') {\r\n            if(topic_data.length !== 5) {\r\n                console.log('[MQTT] An update was received in a non-participant-specific topic');\r\n            return;\r\n            }\r\n            const participantId = topic_data[4];\r\n            if(participantId !== this.participantId) {  // Discard self updates\r\n                updateCallback(participantId, JSON.parse(message));\r\n            }\r\n        }\r\n        });\r\n    }\r\n    //Para que el cliente publique un mensaje de control en el que incluirá datos en formato JSON\r\n    publishControl(controlMessage) {\r\n        console.log(controlMessage);\r\n        this.client.publish(\r\n        `swarm/session/${this.sessionId}/control/${this.participantId}`,\r\n        JSON.stringify(controlMessage)\r\n        );\r\n    }\r\n    //Para que el cliente publique un mensaje de actualización en el que incluirá datos en formato JSON\r\n    //Típicamente estos datos harán referencia a la posición de la bolita de nuestro componenete BoardView\r\n    publishUpdate(updateMessage) {\r\n        this.client.publish(\r\n        `swarm/session/${this.sessionId}/updates/${this.participantId}`,\r\n        JSON.stringify(updateMessage)\r\n        );\r\n    }\r\n    //Para cerrar la conexión\r\n    close() {\r\n        this.client.end();\r\n    }\r\n}\r\n\r\nexport {SessionStatus, Session};\r\n"],"mappings":"kPACA,MAAOA,KAAI,KAAM,kBAAkB,CAEnC,GAAMC,cAAa,CAAGC,MAAM,CAACC,MAAM,CAAC,CAChCC,OAAO,CAAEC,MAAM,CAAC,SAAS,CAAC,CAAE;AAC5BC,OAAO,CAAED,MAAM,CAAC,SAAS,CAAC,CAAE;AAC5BE,MAAM,CAAEF,MAAM,CAAC,QAAQ,CAAK;AAChC,CAAC,CAAC,CAAC,GAEGG,QAAO,yBACT,iBAAYC,SAAS,CAAEC,aAAa,CAAEC,eAAe,CAAEC,cAAc,CAAE,8CACnEC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,IAAI,CAACL,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAACC,aAAa,CAAGA,aAAa,CAElC,IAAI,CAACK,MAAM,CAAGf,IAAI,CAACgB,OAAO,gBAClBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,WAChC,CACIC,KAAK,CAAE,IAAI,CACXC,cAAc,CAAE,IACpB,CAAC,CACA,CACD,IAAI,CAACN,MAAM,CAACO,EAAE,CAAC,SAAS,CAAE,UAAM,CAChCT,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChD,KAAI,CAACC,MAAM,CAACQ,SAAS,CAAC,yBACDd,SAAS,qCACTA,SAAS,eAC7B,CAAE,SAACe,GAAG,CAAK,CACR,GAAG,CAACA,GAAG,CAAEX,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACjE,CAAC,CAAC,CACF,CAAC,CAAC,CACF,IAAI,CAACC,MAAM,CAACO,EAAE,CAAC,SAAS,CAAE,SAACG,KAAK,CAAEC,OAAO,CAAK,CAC9C;AACA,GAAMC,WAAU,CAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAE,CAAC,CAAC,CACtC;AACA,GACKD,UAAU,CAACE,MAAM,CAAG,CAAC,EAClBF,UAAU,CAAC,CAAC,CAAC,GAAK,OAAQ,EAC1BA,UAAU,CAAC,CAAC,CAAC,GAAK,SACtB;AAAA,EACG,CAACA,UAAU,CAAC,CAAC,CAAC,CAACE,MAClB;AAAA,EACGC,KAAK,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CACzB,CACEd,OAAO,CAACC,GAAG,iCAA0BW,KAAK,MAAI,CAC9C,OACJ,CAEA,GAAMhB,UAAS,CAAGkB,UAAU,CAAC,CAAC,CAAC,CAC/B,GAAGlB,SAAS,GAAK,KAAI,CAACA,SAAS,CAAE,CAC7BI,OAAO,CAACC,GAAG,sCAA+BL,SAAS,MAAI,CACvD,OACJ,CAEA,GAAGkB,UAAU,CAAC,CAAC,CAAC,GAAK,SAAS,CAAE,CAC5BhB,eAAe,CAACoB,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAAC,CACxC,CAAC,IACI,IAAGC,UAAU,CAAC,CAAC,CAAC,GAAK,SAAS,CAAE,CACjC,GAAGA,UAAU,CAACE,MAAM,GAAK,CAAC,CAAE,CACxBhB,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC,CACpF,OACA,CACA,GAAMJ,eAAa,CAAGiB,UAAU,CAAC,CAAC,CAAC,CACnC,GAAGjB,cAAa,GAAK,KAAI,CAACA,aAAa,CAAE,CAAG;AACxCE,cAAc,CAACF,cAAa,CAAEqB,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAAC,CACtD,CACJ,CACA,CAAC,CAAC,CACN,CACA;AAAA,kDACA,wBAAeO,cAAc,CAAE,CAC3BpB,OAAO,CAACC,GAAG,CAACmB,cAAc,CAAC,CAC3B,IAAI,CAAClB,MAAM,CAACmB,OAAO,yBACF,IAAI,CAACzB,SAAS,qBAAY,IAAI,CAACC,aAAa,EAC7DqB,IAAI,CAACI,SAAS,CAACF,cAAc,CAAC,CAC7B,CACL,CACA;AACA;AAAA,6BACA,uBAAcG,aAAa,CAAE,CACzB,IAAI,CAACrB,MAAM,CAACmB,OAAO,yBACF,IAAI,CAACzB,SAAS,qBAAY,IAAI,CAACC,aAAa,EAC7DqB,IAAI,CAACI,SAAS,CAACC,aAAa,CAAC,CAC5B,CACL,CACA;AAAA,qBACA,gBAAQ,CACJ,IAAI,CAACrB,MAAM,CAACsB,GAAG,EAAE,CACrB,CAAC,uBAGL,OAAQpC,aAAa,CAAEO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}