{"ast":null,"code":"import _toConsumableArray from\"C:/VISILAB/Hans/HANS-Platform/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{React,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function BoardView(_ref){var answers=_ref.answers,centralCuePosition=_ref.centralCuePosition,peerMagnetPositions=_ref.peerMagnetPositions,userMagnetPosition=_ref.userMagnetPosition,onUserMagnetMove=_ref.onUserMagnetMove,_ref$debugView=_ref.debugView,debugView=_ref$debugView===void 0?false:_ref$debugView;var svg=useRef();var magnetSize=30;var halfMagnetSize=magnetSize/2;var answersRadius=430;var answersTextRadius=answersRadius+25;var answerPoints=[];var answersText=[];for(var i=0,angle=-Math.PI/2;i<answers.length;i++,angle+=2*Math.PI/answers.length){answerPoints.push({x:~~(answersRadius*Math.cos(angle)),y:~~(answersRadius*Math.sin(angle))});answersText.push({x:~~(answersTextRadius*Math.cos(angle)),y:~~(answersTextRadius*Math.sin(angle)),text:answers[i]});}var distance=function distance(a,b){var x=a.x-b.x,y=a.y-b.y;return Math.sqrt(x*x+y*y);};var getClosestAnswers=function getClosestAnswers(point){var answerDistances=answerPoints.map(function(answerPoint){return distance(answerPoint,point);});return _toConsumableArray(answerDistances.keys()).sort(function(a,b){return answerDistances[a]-answerDistances[b];});};var normalizePosition=function normalizePosition(point){if(answerPoints.length<2)return new Array(answerPoints.length).fill(0);// The position is normalized by decomposing the point into the two closest answers\n// Being `v1 = (a, b)` and `v2 = (c, d)` the vectors that represent the two closest answers\n// Their weights are calculated solving the following system of equations:\n//    a * w1 + b * w2 = x\n//    c * w1 + d * w2 = y\n// Get the indices of the two closest answers\nvar closestAnswerIndices=getClosestAnswers(point);// Get the (X, Y) values of the vectors corresponding to those answers\nvar a=answerPoints[closestAnswerIndices[0]].x,b=answerPoints[closestAnswerIndices[0]].y;var c=answerPoints[closestAnswerIndices[1]].x,d=answerPoints[closestAnswerIndices[1]].y;// Assign the calculated weigths to the respective positions in the normalized position\nvar norm=new Array(answers.length).fill(0);var denominator=c*b-a*d;if(denominator===0){// Will happen in some cases (i.e. when there are 2 answers so the answer vectors are parallel)\nnorm[closestAnswerIndices[0]]=point.y/b;}else{norm[closestAnswerIndices[0]]=-(d*point.x-c*point.y)/denominator;norm[closestAnswerIndices[1]]=(b*point.x-a*point.y)/denominator;}return norm;};var denormalizePosition=function denormalizePosition(position){return position.length!==answerPoints.length||answerPoints.length<2?{x:0,y:0}:{x:answerPoints.map(function(answerPoint,i){return answerPoint.x*position[i];}).reduce(function(sum,val){return sum+val;}),y:answerPoints.map(function(answerPoint,i){return answerPoint.y*position[i];}).reduce(function(sum,val){return sum+val;})};};var startDrag=function startDrag(event){event.preventDefault();var mousemove=function mousemove(event){event.preventDefault();var cursorPoint=svg.current.createSVGPoint();cursorPoint.x=event.clientX;cursorPoint.y=event.clientY;cursorPoint=cursorPoint.matrixTransform(svg.current.getScreenCTM().inverse());var position={x:Math.min(Math.max(cursorPoint.x,-500),500),y:Math.min(Math.max(cursorPoint.y,-500),500)};onUserMagnetMove({x:position.x,y:position.y,norm:normalizePosition(position)});};document.addEventListener(\"mousemove\",mousemove);document.addEventListener(\"mouseup\",function(){document.removeEventListener(\"mousemove\",mousemove);},{once:true});};var cuePosition=denormalizePosition(centralCuePosition);var closestAnswerIndices=debugView?getClosestAnswers(userMagnetPosition):undefined;var normalizedPosition=debugView?normalizePosition(userMagnetPosition):undefined;return/*#__PURE__*/_jsxs(\"svg\",{ref:svg,viewBox:\"-500 -500 1000 1000\",children:[/*#__PURE__*/_jsx(\"polygon\",{points:answerPoints.map(function(p){return\"\".concat(p.x,\",\").concat(p.y);}).join(' '),stroke:\"blue\",strokeWidth:\"5px\",fill:\"none\"}),answerPoints.map(function(p,i){return/*#__PURE__*/_jsx(\"circle\",{cx:p.x,cy:p.y,r:\"20\",fill:\"lightgreen\",stroke:\"blue\",strokeWidth:\"2\"},i);}),answersText.map(function(anchor,i){return/*#__PURE__*/_jsx(\"text\",{x:anchor.x,y:anchor.y,fill:\"black\",fontSize:\"30\",textAnchor:anchor.x===0?\"middle\":anchor.x<0?\"end\":\"start\",dominantBaseline:anchor.y===0?\"middle\":anchor.y<0?\"ideographic\":\"hanging\",children:anchor.text},anchor.text);}),/*#__PURE__*/_jsx(\"circle\",{cx:cuePosition.x,cy:cuePosition.y,r:\"80\",fill:\"#DDDDDD\",stroke:\"black\",strokeWidth:\"2\"}),/*#__PURE__*/_jsx(\"g\",{transform:\"translate(-\".concat(halfMagnetSize,\", -\").concat(halfMagnetSize,\")\"),children:peerMagnetPositions.map(function(normPosition){return denormalizePosition(normPosition);}).map(function(point,i){return/*#__PURE__*/_jsx(\"rect\",{x:point.x,y:point.y,width:magnetSize,height:magnetSize,fill:\"#000000AA\"},i);})}),// DEBUG VISUALIZATION (closest answers & arrows indicating answer relevance)\ndebugView&&answerPoints.length>=2&&/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"defs\",{children:/*#__PURE__*/_jsx(\"marker\",{id:\"arrowhead\",markerWidth:\"10\",markerHeight:\"7\",refX:\"0\",refY:\"3.5\",orient:\"auto\",children:/*#__PURE__*/_jsx(\"polygon\",{points:\"0 0, 10 3.5, 0 7\"})})}),answerPoints.map(function(answerPoint,i){return/*#__PURE__*/_jsx(\"line\",{x1:\"0\",y1:\"0\",x2:answerPoint.x*(0.000001+normalizedPosition[i]),y2:answerPoint.y*(0.000001+normalizedPosition[i]),stroke:\"black\",strokeWidth:\"4\",markerEnd:\"url(#arrowhead)\"},i);}),/*#__PURE__*/_jsx(\"line\",{x1:userMagnetPosition.x,y1:userMagnetPosition.y,x2:\"0\",y2:\"0\",stroke:\"black\"}),/*#__PURE__*/_jsx(\"line\",{x1:userMagnetPosition.x,y1:userMagnetPosition.y,x2:answerPoints[closestAnswerIndices[0]].x,y2:answerPoints[closestAnswerIndices[0]].y,stroke:\"black\"}),/*#__PURE__*/_jsx(\"line\",{x1:userMagnetPosition.x,y1:userMagnetPosition.y,x2:answerPoints[closestAnswerIndices[1]].x,y2:answerPoints[closestAnswerIndices[1]].y,stroke:\"black\"})]})/* END OF DEBUG VISUALIZATION */,/*#__PURE__*/_jsx(\"circle\",{cx:userMagnetPosition.x,cy:userMagnetPosition.y,r:magnetSize/2,fill:\"#FF0000\",onMouseDown:startDrag})]});}","map":{"version":3,"names":["React","useRef","BoardView","answers","centralCuePosition","peerMagnetPositions","userMagnetPosition","onUserMagnetMove","debugView","svg","magnetSize","halfMagnetSize","answersRadius","answersTextRadius","answerPoints","answersText","i","angle","Math","PI","length","push","x","cos","y","sin","text","distance","a","b","sqrt","getClosestAnswers","point","answerDistances","map","answerPoint","keys","sort","normalizePosition","Array","fill","closestAnswerIndices","c","d","norm","denominator","denormalizePosition","position","reduce","sum","val","startDrag","event","preventDefault","mousemove","cursorPoint","current","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","min","max","document","addEventListener","removeEventListener","once","cuePosition","undefined","normalizedPosition","p","join","anchor","normPosition"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/components/BoardView.jsx"],"sourcesContent":["import { React, useRef } from \"react\";\r\n\r\nexport default function BoardView({\r\n  answers,\r\n  centralCuePosition, peerMagnetPositions,\r\n  userMagnetPosition, onUserMagnetMove,\r\n  debugView=false\r\n}) {\r\n  const svg = useRef();\r\n\r\n  const magnetSize = 30;\r\n  const halfMagnetSize = magnetSize / 2;\r\n  const answersRadius = 430;\r\n  const answersTextRadius = answersRadius + 25;\r\n  let answerPoints = [];\r\n  let answersText = [];\r\n  for(let i=0, angle = -Math.PI/2; i < answers.length; i++, angle += 2*Math.PI/answers.length) {\r\n    answerPoints.push({\r\n      x: ~~(answersRadius * Math.cos(angle)),\r\n      y: ~~(answersRadius * Math.sin(angle))\r\n    });\r\n    answersText.push({\r\n      x: ~~(answersTextRadius * Math.cos(angle)),\r\n      y: ~~(answersTextRadius * Math.sin(angle)),\r\n      text: answers[i]\r\n    });\r\n  }\r\n\r\n  const distance = (a, b) => {let x = a.x - b.x, y = a.y - b.y; return Math.sqrt(x*x + y*y); };\r\n  const getClosestAnswers = (point) => {\r\n    let answerDistances = answerPoints.map((answerPoint) => distance(answerPoint, point));\r\n    return [...answerDistances.keys()].sort((a,b) => answerDistances[a] - answerDistances[b]);\r\n  }\r\n  const normalizePosition = (point) => {\r\n    if(answerPoints.length < 2) return new Array(answerPoints.length).fill(0);\r\n    // The position is normalized by decomposing the point into the two closest answers\r\n    // Being `v1 = (a, b)` and `v2 = (c, d)` the vectors that represent the two closest answers\r\n    // Their weights are calculated solving the following system of equations:\r\n    //    a * w1 + b * w2 = x\r\n    //    c * w1 + d * w2 = y\r\n\r\n    // Get the indices of the two closest answers\r\n    let closestAnswerIndices = getClosestAnswers(point);\r\n\r\n    // Get the (X, Y) values of the vectors corresponding to those answers\r\n    let a = answerPoints[closestAnswerIndices[0]].x, b = answerPoints[closestAnswerIndices[0]].y;\r\n    let c = answerPoints[closestAnswerIndices[1]].x, d = answerPoints[closestAnswerIndices[1]].y;\r\n\r\n    // Assign the calculated weigths to the respective positions in the normalized position\r\n    let norm = new Array(answers.length).fill(0);\r\n    const denominator = c * b - a * d;\r\n    if(denominator === 0) {\r\n      // Will happen in some cases (i.e. when there are 2 answers so the answer vectors are parallel)\r\n      norm[closestAnswerIndices[0]] = point.y / b;\r\n    } else {\r\n      norm[closestAnswerIndices[0]] = -(d * point.x - c * point.y) / denominator;\r\n      norm[closestAnswerIndices[1]] =  (b * point.x - a * point.y) / denominator;\r\n    }\r\n    return norm;\r\n  };\r\n  const denormalizePosition = position => \r\n    (position.length !== answerPoints.length) || (answerPoints.length < 2)\r\n    ? {x: 0, y: 0}\r\n    : {\r\n      x: answerPoints.map((answerPoint, i) => answerPoint.x * position[i]).reduce((sum, val) => sum + val),\r\n      y: answerPoints.map((answerPoint, i) => answerPoint.y * position[i]).reduce((sum, val) => sum + val),\r\n    };\r\n\r\n  const startDrag = (event) => {\r\n    event.preventDefault();\r\n\r\n    const mousemove = (event) => {\r\n      event.preventDefault();\r\n\r\n      let cursorPoint = svg.current.createSVGPoint();\r\n      cursorPoint.x = event.clientX;\r\n      cursorPoint.y = event.clientY;\r\n      cursorPoint = cursorPoint.matrixTransform(svg.current.getScreenCTM().inverse());\r\n\r\n      const position = {\r\n        x: Math.min(Math.max(cursorPoint.x, -500), 500),\r\n        y: Math.min(Math.max(cursorPoint.y, -500), 500)\r\n      };\r\n      onUserMagnetMove({x: position.x, y: position.y, norm: normalizePosition(position)});\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", mousemove);\r\n    document.addEventListener(\"mouseup\", () => {\r\n      document.removeEventListener(\"mousemove\", mousemove);\r\n    }, { once: true });\r\n  }\r\n\r\n  const cuePosition = denormalizePosition(centralCuePosition);\r\n\r\n  const closestAnswerIndices = debugView ? getClosestAnswers(userMagnetPosition) : undefined;\r\n  const normalizedPosition = debugView ? normalizePosition(userMagnetPosition) : undefined;\r\n\r\n  return (\r\n    <svg ref={svg}\r\n      viewBox=\"-500 -500 1000 1000\"\r\n    >\r\n      <polygon\r\n        points={answerPoints.map((p) => `${p.x},${p.y}`).join(' ')}\r\n        stroke=\"blue\"\r\n        strokeWidth=\"5px\"\r\n        fill=\"none\"\r\n      />\r\n      {answerPoints.map((p, i) => (\r\n        <circle\r\n          key={i}\r\n          cx={p.x}\r\n          cy={p.y}\r\n          r=\"20\"\r\n          fill=\"lightgreen\"\r\n          stroke=\"blue\"\r\n          strokeWidth=\"2\"\r\n        />\r\n      ))}\r\n      {answersText.map((anchor, i) => (\r\n        <text\r\n          key={anchor.text}\r\n          x={anchor.x}\r\n          y={anchor.y}\r\n          fill=\"black\"\r\n          fontSize=\"30\"\r\n          textAnchor={anchor.x === 0 ? \"middle\" : (anchor.x < 0 ? \"end\" : \"start\")}\r\n          dominantBaseline={anchor.y === 0 ? \"middle\" : (anchor.y < 0 ? \"ideographic\" : \"hanging\")}\r\n        >\r\n          {anchor.text}\r\n        </text>\r\n      ))}\r\n      <circle\r\n        cx={cuePosition.x}\r\n        cy={cuePosition.y}\r\n        r=\"80\"\r\n        fill=\"#DDDDDD\"\r\n        stroke=\"black\"\r\n        strokeWidth=\"2\"\r\n      />\r\n      <g transform={`translate(-${halfMagnetSize}, -${halfMagnetSize})`}>\r\n        {peerMagnetPositions.map(normPosition => denormalizePosition(normPosition)).map((point, i) => (\r\n          <rect\r\n            key={i}\r\n            x={point.x}\r\n            y={point.y}\r\n            width={magnetSize}\r\n            height={magnetSize}\r\n            fill=\"#000000AA\"\r\n          />\r\n        ))}\r\n      </g>\r\n      { // DEBUG VISUALIZATION (closest answers & arrows indicating answer relevance)\r\n      debugView && answerPoints.length >= 2 && (\r\n      <g>\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n          refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n          </marker>\r\n        </defs>\r\n        {answerPoints.map((answerPoint, i) => (\r\n          <line\r\n          key={i}\r\n          x1='0'\r\n          y1='0'\r\n          x2={answerPoint.x * (0.000001 + normalizedPosition[i])}\r\n          y2={answerPoint.y * (0.000001 + normalizedPosition[i])}\r\n          stroke='black'\r\n          strokeWidth='4'\r\n          markerEnd=\"url(#arrowhead)\"\r\n        />\r\n        ))}\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2='0'\r\n          y2='0'\r\n          stroke='black'\r\n        />\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2={answerPoints[closestAnswerIndices[0]].x}\r\n          y2={answerPoints[closestAnswerIndices[0]].y}\r\n          stroke='black'\r\n        />\r\n        <line\r\n          x1={userMagnetPosition.x}\r\n          y1={userMagnetPosition.y}\r\n          x2={answerPoints[closestAnswerIndices[1]].x}\r\n          y2={answerPoints[closestAnswerIndices[1]].y}\r\n          stroke='black'\r\n        />\r\n      </g>\r\n      ) /* END OF DEBUG VISUALIZATION */ }\r\n      <circle\r\n        cx={userMagnetPosition.x}\r\n        cy={userMagnetPosition.y}\r\n        r={magnetSize/2}\r\n        fill=\"#FF0000\"\r\n        onMouseDown={startDrag}\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}