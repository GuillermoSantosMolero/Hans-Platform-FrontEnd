{"ast":null,"code":"var _jsxFileName = \"C:\\\\VISILAB\\\\Hans\\\\HANS-Platform\\\\client\\\\src\\\\components\\\\session\\\\SessionView.jsx\",\n  _s = $RefreshSig$();\nimport { React, useRef, useState, useEffect } from \"react\";\nimport Backdrop from '@mui/material/Backdrop';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport CountDown from './Countdown';\nimport SessionStatusView from './StatusView';\nimport QuestionDetails from './QuestionDetails';\nimport BoardView from '../BoardView';\nimport { Session, SessionStatus } from '../../context/Session';\nimport { QuestionStatus } from '../../context/Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SessionView(_ref) {\n  _s();\n  let {\n    sessionId,\n    participantId,\n    onLeave = () => {}\n  } = _ref;\n  const sessionRef = useRef(null);\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\n  const [question, setQuestion] = useState({\n    status: QuestionStatus.Undefined\n  });\n  const [userMagnetPosition, setUserMagnetPosition] = useState({\n    x: 0,\n    y: 0,\n    norm: []\n  });\n  const [peerMagnetPositions, setPeerMagnetPositions] = useState({});\n  const [centralCuePosition, setCentralCuePosition] = useState([]);\n  const [targetDateCountdown, setTargetDateCountdown] = useState('2023-04-01T00:00:00Z');\n  useEffect(() => {\n    fetch(`/api/session/${sessionId}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        res.json().then(data => {\n          setSessionStatus(SessionStatus.Waiting);\n          if (data.question_id) {\n            setQuestion({\n              status: QuestionStatus.Loading,\n              id: data.question_id\n            });\n          }\n        });\n      } else {\n        res.text().then(msg => console.log(msg));\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    sessionRef.current = new Session(sessionId, participantId, controlMessage => {\n      switch (controlMessage.type) {\n        case 'setup':\n          {\n            if (controlMessage.question_id === null) {\n              setQuestion({\n                status: QuestionStatus.Undefined\n              });\n            } else {\n              setQuestion({\n                status: QuestionStatus.Loading,\n                id: controlMessage.question_id\n              });\n            }\n            break;\n          }\n        case 'start':\n          {\n            setSessionStatus(SessionStatus.Active);\n            console.log('El valor de targetDate es: ' + (controlMessage.targetDate + 12));\n            setTargetDateCountdown(controlMessage.targetDate);\n            break;\n          }\n        case 'started':\n          {\n            setSessionStatus(SessionStatus.Active);\n            setTargetDateCountdown(controlMessage.targetDate);\n            break;\n          }\n        case 'stop':\n          {\n            setSessionStatus(SessionStatus.Waiting);\n            break;\n          }\n        default:\n          break;\n      }\n    }, (participantId, updateMessage) => {\n      setPeerMagnetPositions(peerPositions => {\n        return {\n          ...peerPositions,\n          [participantId]: updateMessage.data.position\n        };\n      });\n    });\n  }, [sessionId, participantId]);\n  useEffect(() => {\n    let ignore = false;\n    if (question.status === QuestionStatus.Loading) {\n      fetch(`/api/question/${question.id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          res.json().then(data => {\n            if (!ignore) {\n              setQuestion({\n                status: QuestionStatus.Loaded,\n                id: data.id,\n                prompt: data.prompt,\n                answers: data.answers,\n                image: `/api/question/${data.id}/image`\n              });\n              sessionRef.current.publishControl({\n                type: 'ready'\n              });\n            }\n          });\n          setUserMagnetPosition({\n            x: 0,\n            y: 0,\n            norm: []\n          });\n        } else {\n          res.text().then(msg => console.log(msg));\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [question]);\n  useEffect(() => {\n    // Update central Cue based on magnet positions\n    const usablePeerPositions = Object.keys(peerMagnetPositions).map(k => peerMagnetPositions[k]).filter(peerPosition => peerPosition.length === userMagnetPosition.norm.length);\n    setCentralCuePosition(usablePeerPositions.reduce((cuePosition, peerPosition) => cuePosition.map((value, i) => value + peerPosition[i]), userMagnetPosition.norm).map(value => value / (1 + usablePeerPositions.length)));\n  }, [userMagnetPosition, peerMagnetPositions]);\n\n  // DEBUG-ONLY\n  /*useEffect(() => {\r\n    // The component was drawn for the first time, configure a 1-second interval to simulate peer updates\r\n    const interval = setInterval(() => {\r\n      setPeerMagnetPositions(peerPositions => peerPositions.map(\r\n        peerPosition => \r\n          ((question.status === QuestionStatus.Loaded) && (peerPosition.length !== question.answers.length))\r\n          ? new Array(question.answers.length).fill(0).map(_ => Math.random())\r\n          : peerPosition.map(\r\n            value => Math.min(1.1, Math.max(0, value + (Math.random() - 0.5) * 0.1))\r\n          )\r\n      ));\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [question]);*/\n\n  const onUserMagnetMove = position => {\n    if (sessionStatus !== SessionStatus.Active) return;\n    let sumPositions = 0;\n    for (let i = 0; i < position.norm.length; i++) sumPositions += position.norm[i];\n    if (sumPositions > 1) {\n      for (let i = 0; i < position.norm.length; i++) position.norm[i] = position.norm[i] / sumPositions;\n    }\n    setUserMagnetPosition(position);\n    const tiempoTranscurrido = Date.now();\n    const hoy = new Date(tiempoTranscurrido);\n    sessionRef.current.publishUpdate({\n      data: {\n        position: position.norm,\n        timeStamp: hoy.toISOString()\n      }\n    });\n  };\n  const onLeaveSessionClick = () => {\n    // TODO: User should double-check the intention to logout (showing a modal when the leave/logout button is pressed)\n    // TODO: The server should be notified about the user leaving the session:\n    //sessionRef.current.leave()\n    fetch(`/api/session/${sessionId}/participants/${participantId}`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        res.json().then(data => {});\n      } else {}\n    }).catch(error => {});\n    onLeave();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Backdrop, {\n      sx: {\n        color: '#fff',\n        zIndex: theme => theme.zIndex.drawer + 1\n      },\n      open: sessionStatus !== SessionStatus.Active,\n      children: /*#__PURE__*/_jsxDEV(SessionStatusView, {\n        sessionId: sessionId,\n        sessionStatus: sessionStatus,\n        questionStatus: question.status,\n        onLeaveClick: onLeaveSessionClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"main\",\n      height: \"100vh\",\n      sx: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        component: \"header\",\n        elevation: 2,\n        sx: {\n          m: 1,\n          p: 1,\n          borderRadius: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h4\",\n          textAlign: \"center\",\n          children: question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flex: 1,\n          minHeight: 0,\n          gap: '10px',\n          m: 1,\n          display: 'flex',\n          alignItems: 'stretch'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          sx: {\n            flex: 1,\n            /* grow: 1, shrink: 1, basis: 0*/\n            alignSelf: 'flex-start',\n            bgcolor: '#EEEEEE',\n            p: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(QuestionDetails, {\n            image: question.status === QuestionStatus.Loaded ? question.image : \"\",\n            prompt: question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\",\n            timeInSecs: question.status === QuestionStatus.Loaded ? 30 : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CountDown, {\n            targetDate: sessionStatus === SessionStatus.Active ? targetDateCountdown : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            flex: 2,\n            // grow: 2, shrink: 2, basis: 0\n            height: '100%',\n            p: 1,\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(BoardView, {\n            answers: question.status === QuestionStatus.Loaded ? question.answers : [],\n            centralCuePosition: centralCuePosition,\n            peerMagnetPositions: Object.keys(peerMagnetPositions).map(k => peerMagnetPositions[k]),\n            userMagnetPosition: userMagnetPosition,\n            onUserMagnetMove: onUserMagnetMove\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(SessionView, \"3B8oHkzERFCwijWr5kYYrPn6r54=\");\n_c = SessionView;\nvar _c;\n$RefreshReg$(_c, \"SessionView\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Backdrop","Paper","Box","Typography","CountDown","SessionStatusView","QuestionDetails","BoardView","Session","SessionStatus","QuestionStatus","SessionView","sessionId","participantId","onLeave","sessionRef","sessionStatus","setSessionStatus","Joining","question","setQuestion","status","Undefined","userMagnetPosition","setUserMagnetPosition","x","y","norm","peerMagnetPositions","setPeerMagnetPositions","centralCuePosition","setCentralCuePosition","targetDateCountdown","setTargetDateCountdown","fetch","method","headers","then","res","json","data","Waiting","question_id","Loading","id","text","msg","console","log","catch","error","current","controlMessage","type","Active","targetDate","updateMessage","peerPositions","position","ignore","Loaded","prompt","answers","image","publishControl","usablePeerPositions","Object","keys","map","k","filter","peerPosition","length","reduce","cuePosition","value","i","onUserMagnetMove","sumPositions","tiempoTranscurrido","Date","now","hoy","publishUpdate","timeStamp","toISOString","onLeaveSessionClick","color","zIndex","theme","drawer","display","flexDirection","m","p","borderRadius","flex","minHeight","gap","alignItems","alignSelf","bgcolor","height"],"sources":["C:/VISILAB/Hans/HANS-Platform/client/src/components/session/SessionView.jsx"],"sourcesContent":["import { React, useRef, useState, useEffect } from \"react\";\r\n\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport CountDown from './Countdown';\r\nimport SessionStatusView from './StatusView';\r\nimport QuestionDetails from './QuestionDetails';\r\nimport BoardView from '../BoardView';\r\n\r\nimport { Session, SessionStatus } from '../../context/Session';\r\nimport { QuestionStatus } from '../../context/Question';\r\n\r\n\r\nexport default function SessionView({ sessionId, participantId, onLeave=()=>{} }) {\r\n  const sessionRef = useRef(null);\r\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\r\n  const [question, setQuestion] = useState({status: QuestionStatus.Undefined});\r\n  const [userMagnetPosition, setUserMagnetPosition] = useState({x: 0, y: 0, norm: []});\r\n  const [peerMagnetPositions, setPeerMagnetPositions] = useState({});\r\n  const [centralCuePosition, setCentralCuePosition] = useState([]);\r\n  const [targetDateCountdown, setTargetDateCountdown] = useState('2023-04-01T00:00:00Z');\r\n  useEffect(() => {\r\n    fetch(\r\n      `/api/session/${sessionId}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n      }\r\n    ).then(res => {\r\n      if(res.status === 200) {\r\n        res.json().then(data => {\r\n          setSessionStatus(SessionStatus.Waiting);\r\n          if(data.question_id) {\r\n            setQuestion({status: QuestionStatus.Loading, id: data.question_id});\r\n          }\r\n        });\r\n      } else {\r\n        res.text().then(msg => console.log(msg));\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n\r\n    sessionRef.current = new Session(sessionId, participantId,\r\n      (controlMessage) => {\r\n        switch(controlMessage.type) {\r\n          case 'setup': {\r\n            if(controlMessage.question_id === null) {\r\n              setQuestion({status: QuestionStatus.Undefined});\r\n            } else {\r\n              setQuestion({\r\n                status: QuestionStatus.Loading,\r\n                id: controlMessage.question_id\r\n              });\r\n            }\r\n            break;\r\n          }\r\n          case 'start': {\r\n            setSessionStatus(SessionStatus.Active);\r\n            console.log('El valor de targetDate es: '+(controlMessage.targetDate+12))\r\n            setTargetDateCountdown((controlMessage.targetDate))\r\n            break;\r\n          }\r\n          case 'started': {\r\n            setSessionStatus(SessionStatus.Active);\r\n            setTargetDateCountdown((controlMessage.targetDate))\r\n            break;\r\n          }\r\n          case 'stop': {\r\n            setSessionStatus(SessionStatus.Waiting);\r\n            break;\r\n          }\r\n          default: break;\r\n        }\r\n      },\r\n      (participantId, updateMessage) => {\r\n        setPeerMagnetPositions((peerPositions) => {\r\n          return {\r\n            ...peerPositions,\r\n            [participantId]: updateMessage.data.position\r\n          }\r\n        });\r\n      });\r\n  }, [sessionId, participantId]);\r\n\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    if(question.status === QuestionStatus.Loading) {\r\n      fetch(\r\n        `/api/question/${question.id}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n          },\r\n        }\r\n      ).then(res => {\r\n        if(res.status === 200) {\r\n          res.json().then(data => {\r\n            if(!ignore) {\r\n              setQuestion({\r\n                status: QuestionStatus.Loaded,\r\n                id: data.id,\r\n                prompt: data.prompt,\r\n                answers: data.answers,\r\n                image: `/api/question/${data.id}/image`,\r\n              });\r\n              sessionRef.current.publishControl({type: 'ready'});\r\n            }\r\n          });\r\n          setUserMagnetPosition({x: 0, y: 0, norm: []})\r\n        } else {\r\n          res.text().then(msg => console.log(msg));\r\n        }\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n    return () => { ignore = true };\r\n  }, [question]);\r\n\r\n  useEffect(() => {\r\n    // Update central Cue based on magnet positions\r\n    const usablePeerPositions = Object.keys(peerMagnetPositions).map(\r\n      k => peerMagnetPositions[k]\r\n    ).filter(peerPosition => peerPosition.length === userMagnetPosition.norm.length);\r\n    setCentralCuePosition(\r\n      usablePeerPositions.reduce(\r\n        (cuePosition, peerPosition) => cuePosition.map(\r\n          (value, i) => value + peerPosition[i]\r\n        ),\r\n        userMagnetPosition.norm\r\n      ).map(value => value / (1 + usablePeerPositions.length))\r\n    );\r\n  }, [userMagnetPosition, peerMagnetPositions])\r\n\r\n  // DEBUG-ONLY\r\n  /*useEffect(() => {\r\n    // The component was drawn for the first time, configure a 1-second interval to simulate peer updates\r\n    const interval = setInterval(() => {\r\n      setPeerMagnetPositions(peerPositions => peerPositions.map(\r\n        peerPosition => \r\n          ((question.status === QuestionStatus.Loaded) && (peerPosition.length !== question.answers.length))\r\n          ? new Array(question.answers.length).fill(0).map(_ => Math.random())\r\n          : peerPosition.map(\r\n            value => Math.min(1.1, Math.max(0, value + (Math.random() - 0.5) * 0.1))\r\n          )\r\n      ));\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [question]);*/\r\n\r\n  const onUserMagnetMove = (position) => {\r\n    if(sessionStatus !== SessionStatus.Active) return;\r\n    let sumPositions = 0\r\n    for(let i=0; i<position.norm.length;i++)\r\n      sumPositions+=position.norm[i];\r\n    if(sumPositions>1){\r\n      for(let i=0; i<position.norm.length;i++)\r\n      position.norm[i]=position.norm[i]/sumPositions;\r\n    }\r\n    setUserMagnetPosition(position);\r\n    const tiempoTranscurrido = Date.now();\r\n    const hoy = new Date(tiempoTranscurrido);\r\n    sessionRef.current.publishUpdate({data: {position: position.norm, timeStamp: hoy.toISOString()}});\r\n  };\r\n\r\n  const onLeaveSessionClick = () => {\r\n    // TODO: User should double-check the intention to logout (showing a modal when the leave/logout button is pressed)\r\n    // TODO: The server should be notified about the user leaving the session:\r\n    //sessionRef.current.leave()\r\n    fetch(\r\n      `/api/session/${sessionId}/participants/${participantId}`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    ).then(res => {\r\n      if(res.status === 200) {\r\n        res.json().then(data => {\r\n        });\r\n      } else {\r\n      }\r\n    }).catch(error => {\r\n    });\r\n    onLeave();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={sessionStatus !== SessionStatus.Active}\r\n      >\r\n        <SessionStatusView\r\n          sessionId={sessionId}\r\n          sessionStatus={sessionStatus}\r\n          questionStatus={question.status}\r\n          onLeaveClick={onLeaveSessionClick}\r\n        />\r\n      </Backdrop>\r\n      <Box\r\n        component=\"main\"\r\n        height='100vh'\r\n        sx={{\r\n          display:'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <Paper\r\n          component=\"header\"\r\n          elevation={2}\r\n          sx={{\r\n            m: 1,\r\n            p: 1,\r\n            borderRadius: 2\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h4\" textAlign='center'>\r\n            {question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\"}\r\n          </Typography>\r\n        </Paper>\r\n        <Box\r\n          sx={{\r\n            flex: 1,\r\n            minHeight: 0,\r\n            gap: '10px',\r\n            m: 1,\r\n            display: 'flex',\r\n            alignItems: 'stretch',\r\n          }}\r\n        >\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              flex: 1, /* grow: 1, shrink: 1, basis: 0*/\r\n              alignSelf: 'flex-start',\r\n              bgcolor: '#EEEEEE',\r\n              p: 1,\r\n            }}\r\n          >\r\n          <QuestionDetails\r\n            image={question.status === QuestionStatus.Loaded ? question.image : \"\"}\r\n            prompt={question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\"}\r\n            timeInSecs={question.status === QuestionStatus.Loaded ? 30 : 0}\r\n          />\r\n          <CountDown targetDate={sessionStatus === SessionStatus.Active ? targetDateCountdown : 0} />\r\n          </Paper>\r\n          <Paper\r\n            elevation={2}\r\n            sx={{\r\n              flex: 2, // grow: 2, shrink: 2, basis: 0\r\n              height: '100%',\r\n              p: 1,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n            }}\r\n          >\r\n          <BoardView\r\n            answers={question.status === QuestionStatus.Loaded ? question.answers : []}\r\n            centralCuePosition={centralCuePosition}\r\n            peerMagnetPositions={Object.keys(peerMagnetPositions).map(\r\n              k => peerMagnetPositions[k]\r\n            )}\r\n            userMagnetPosition={userMagnetPosition}\r\n            onUserMagnetMove={onUserMagnetMove}\r\n          />\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE1D,OAAOC,QAAQ,MAAM,wBAAwB;AAE7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,iBAAiB,MAAM,cAAc;AAC5C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,SAAS,MAAM,cAAc;AAEpC,SAASC,OAAO,EAAEC,aAAa,QAAQ,uBAAuB;AAC9D,SAASC,cAAc,QAAQ,wBAAwB;AAAC;AAAA;AAGxD,eAAe,SAASC,WAAW,OAA+C;EAAA;EAAA,IAA9C;IAAEC,SAAS;IAAEC,aAAa;IAAEC,OAAO,GAAC,MAAI,CAAC;EAAE,CAAC;EAC9E,MAAMC,UAAU,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAACW,aAAa,CAACS,OAAO,CAAC;EACzE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC;IAACuB,MAAM,EAAEX,cAAc,CAACY;EAAS,CAAC,CAAC;EAC5E,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1B,QAAQ,CAAC;IAAC2B,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC,CAAC;EACpF,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClE,MAAM,CAACgC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACkC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnC,QAAQ,CAAC,sBAAsB,CAAC;EACtFC,SAAS,CAAC,MAAM;IACdmC,KAAK,CACF,gBAAetB,SAAU,EAAC,EAC3B;MACEuB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE;MACZ;IACF,CAAC,CACF,CAACC,IAAI,CAACC,GAAG,IAAI;MACZ,IAAGA,GAAG,CAACjB,MAAM,KAAK,GAAG,EAAE;QACrBiB,GAAG,CAACC,IAAI,EAAE,CAACF,IAAI,CAACG,IAAI,IAAI;UACtBvB,gBAAgB,CAACR,aAAa,CAACgC,OAAO,CAAC;UACvC,IAAGD,IAAI,CAACE,WAAW,EAAE;YACnBtB,WAAW,CAAC;cAACC,MAAM,EAAEX,cAAc,CAACiC,OAAO;cAAEC,EAAE,EAAEJ,IAAI,CAACE;YAAW,CAAC,CAAC;UACrE;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLJ,GAAG,CAACO,IAAI,EAAE,CAACR,IAAI,CAACS,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC,CAACG,KAAK,CAACC,KAAK,IAAI;MAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IACpB,CAAC,CAAC;IAEFnC,UAAU,CAACoC,OAAO,GAAG,IAAI3C,OAAO,CAACI,SAAS,EAAEC,aAAa,EACtDuC,cAAc,IAAK;MAClB,QAAOA,cAAc,CAACC,IAAI;QACxB,KAAK,OAAO;UAAE;YACZ,IAAGD,cAAc,CAACV,WAAW,KAAK,IAAI,EAAE;cACtCtB,WAAW,CAAC;gBAACC,MAAM,EAAEX,cAAc,CAACY;cAAS,CAAC,CAAC;YACjD,CAAC,MAAM;cACLF,WAAW,CAAC;gBACVC,MAAM,EAAEX,cAAc,CAACiC,OAAO;gBAC9BC,EAAE,EAAEQ,cAAc,CAACV;cACrB,CAAC,CAAC;YACJ;YACA;UACF;QACA,KAAK,OAAO;UAAE;YACZzB,gBAAgB,CAACR,aAAa,CAAC6C,MAAM,CAAC;YACtCP,OAAO,CAACC,GAAG,CAAC,6BAA6B,IAAEI,cAAc,CAACG,UAAU,GAAC,EAAE,CAAC,CAAC;YACzEtB,sBAAsB,CAAEmB,cAAc,CAACG,UAAU,CAAE;YACnD;UACF;QACA,KAAK,SAAS;UAAE;YACdtC,gBAAgB,CAACR,aAAa,CAAC6C,MAAM,CAAC;YACtCrB,sBAAsB,CAAEmB,cAAc,CAACG,UAAU,CAAE;YACnD;UACF;QACA,KAAK,MAAM;UAAE;YACXtC,gBAAgB,CAACR,aAAa,CAACgC,OAAO,CAAC;YACvC;UACF;QACA;UAAS;MAAM;IAEnB,CAAC,EACD,CAAC5B,aAAa,EAAE2C,aAAa,KAAK;MAChC3B,sBAAsB,CAAE4B,aAAa,IAAK;QACxC,OAAO;UACL,GAAGA,aAAa;UAChB,CAAC5C,aAAa,GAAG2C,aAAa,CAAChB,IAAI,CAACkB;QACtC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAAC9C,SAAS,EAAEC,aAAa,CAAC,CAAC;EAE9Bd,SAAS,CAAC,MAAM;IACd,IAAI4D,MAAM,GAAG,KAAK;IAClB,IAAGxC,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACiC,OAAO,EAAE;MAC7CT,KAAK,CACF,iBAAgBf,QAAQ,CAACyB,EAAG,EAAC,EAC9B;QACET,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE;QACZ;MACF,CAAC,CACF,CAACC,IAAI,CAACC,GAAG,IAAI;QACZ,IAAGA,GAAG,CAACjB,MAAM,KAAK,GAAG,EAAE;UACrBiB,GAAG,CAACC,IAAI,EAAE,CAACF,IAAI,CAACG,IAAI,IAAI;YACtB,IAAG,CAACmB,MAAM,EAAE;cACVvC,WAAW,CAAC;gBACVC,MAAM,EAAEX,cAAc,CAACkD,MAAM;gBAC7BhB,EAAE,EAAEJ,IAAI,CAACI,EAAE;gBACXiB,MAAM,EAAErB,IAAI,CAACqB,MAAM;gBACnBC,OAAO,EAAEtB,IAAI,CAACsB,OAAO;gBACrBC,KAAK,EAAG,iBAAgBvB,IAAI,CAACI,EAAG;cAClC,CAAC,CAAC;cACF7B,UAAU,CAACoC,OAAO,CAACa,cAAc,CAAC;gBAACX,IAAI,EAAE;cAAO,CAAC,CAAC;YACpD;UACF,CAAC,CAAC;UACF7B,qBAAqB,CAAC;YAACC,CAAC,EAAE,CAAC;YAAEC,CAAC,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAE,CAAC,CAAC;QAC/C,CAAC,MAAM;UACLW,GAAG,CAACO,IAAI,EAAE,CAACR,IAAI,CAACS,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;QAC1C;MACF,CAAC,CAAC,CAACG,KAAK,CAACC,KAAK,IAAI;QAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MACpB,CAAC,CAAC;IACJ;IACA,OAAO,MAAM;MAAES,MAAM,GAAG,IAAI;IAAC,CAAC;EAChC,CAAC,EAAE,CAACxC,QAAQ,CAAC,CAAC;EAEdpB,SAAS,CAAC,MAAM;IACd;IACA,MAAMkE,mBAAmB,GAAGC,MAAM,CAACC,IAAI,CAACvC,mBAAmB,CAAC,CAACwC,GAAG,CAC9DC,CAAC,IAAIzC,mBAAmB,CAACyC,CAAC,CAAC,CAC5B,CAACC,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACC,MAAM,KAAKjD,kBAAkB,CAACI,IAAI,CAAC6C,MAAM,CAAC;IAChFzC,qBAAqB,CACnBkC,mBAAmB,CAACQ,MAAM,CACxB,CAACC,WAAW,EAAEH,YAAY,KAAKG,WAAW,CAACN,GAAG,CAC5C,CAACO,KAAK,EAAEC,CAAC,KAAKD,KAAK,GAAGJ,YAAY,CAACK,CAAC,CAAC,CACtC,EACDrD,kBAAkB,CAACI,IAAI,CACxB,CAACyC,GAAG,CAACO,KAAK,IAAIA,KAAK,IAAI,CAAC,GAAGV,mBAAmB,CAACO,MAAM,CAAC,CAAC,CACzD;EACH,CAAC,EAAE,CAACjD,kBAAkB,EAAEK,mBAAmB,CAAC,CAAC;;EAE7C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,MAAMiD,gBAAgB,GAAInB,QAAQ,IAAK;IACrC,IAAG1C,aAAa,KAAKP,aAAa,CAAC6C,MAAM,EAAE;IAC3C,IAAIwB,YAAY,GAAG,CAAC;IACpB,KAAI,IAAIF,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAClB,QAAQ,CAAC/B,IAAI,CAAC6C,MAAM,EAACI,CAAC,EAAE,EACrCE,YAAY,IAAEpB,QAAQ,CAAC/B,IAAI,CAACiD,CAAC,CAAC;IAChC,IAAGE,YAAY,GAAC,CAAC,EAAC;MAChB,KAAI,IAAIF,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAClB,QAAQ,CAAC/B,IAAI,CAAC6C,MAAM,EAACI,CAAC,EAAE,EACvClB,QAAQ,CAAC/B,IAAI,CAACiD,CAAC,CAAC,GAAClB,QAAQ,CAAC/B,IAAI,CAACiD,CAAC,CAAC,GAACE,YAAY;IAChD;IACAtD,qBAAqB,CAACkC,QAAQ,CAAC;IAC/B,MAAMqB,kBAAkB,GAAGC,IAAI,CAACC,GAAG,EAAE;IACrC,MAAMC,GAAG,GAAG,IAAIF,IAAI,CAACD,kBAAkB,CAAC;IACxChE,UAAU,CAACoC,OAAO,CAACgC,aAAa,CAAC;MAAC3C,IAAI,EAAE;QAACkB,QAAQ,EAAEA,QAAQ,CAAC/B,IAAI;QAAEyD,SAAS,EAAEF,GAAG,CAACG,WAAW;MAAE;IAAC,CAAC,CAAC;EACnG,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAM;IAChC;IACA;IACA;IACApD,KAAK,CACF,gBAAetB,SAAU,iBAAgBC,aAAc,EAAC,EACzD;MACEsB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MAClB;IACF,CAAC,CACF,CAACC,IAAI,CAACC,GAAG,IAAI;MACZ,IAAGA,GAAG,CAACjB,MAAM,KAAK,GAAG,EAAE;QACrBiB,GAAG,CAACC,IAAI,EAAE,CAACF,IAAI,CAACG,IAAI,IAAI,CACxB,CAAC,CAAC;MACJ,CAAC,MAAM,CACP;IACF,CAAC,CAAC,CAACS,KAAK,CAACC,KAAK,IAAI,CAClB,CAAC,CAAC;IACFpC,OAAO,EAAE;EACX,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,QAAQ;MACP,EAAE,EAAE;QAAEyE,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAGC,KAAK,IAAKA,KAAK,CAACD,MAAM,CAACE,MAAM,GAAG;MAAE,CAAE;MAClE,IAAI,EAAE1E,aAAa,KAAKP,aAAa,CAAC6C,MAAO;MAAA,uBAE7C,QAAC,iBAAiB;QAChB,SAAS,EAAE1C,SAAU;QACrB,aAAa,EAAEI,aAAc;QAC7B,cAAc,EAAEG,QAAQ,CAACE,MAAO;QAChC,YAAY,EAAEiE;MAAoB;QAAA;QAAA;QAAA;MAAA;IAClC;MAAA;MAAA;MAAA;IAAA,QACO,eACX,QAAC,GAAG;MACF,SAAS,EAAC,MAAM;MAChB,MAAM,EAAC,OAAO;MACd,EAAE,EAAE;QACFK,OAAO,EAAC,MAAM;QACdC,aAAa,EAAE;MACjB,CAAE;MAAA,wBAEF,QAAC,KAAK;QACJ,SAAS,EAAC,QAAQ;QAClB,SAAS,EAAE,CAAE;QACb,EAAE,EAAE;UACFC,CAAC,EAAE,CAAC;UACJC,CAAC,EAAE,CAAC;UACJC,YAAY,EAAE;QAChB,CAAE;QAAA,uBAEF,QAAC,UAAU;UAAC,SAAS,EAAC,IAAI;UAAC,OAAO,EAAC,IAAI;UAAC,SAAS,EAAC,QAAQ;UAAA,UACvD5E,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACkD,MAAM,GAAGzC,QAAQ,CAAC0C,MAAM,GAAG;QAA0B;UAAA;UAAA;UAAA;QAAA;MAC9E;QAAA;QAAA;QAAA;MAAA,QACP,eACR,QAAC,GAAG;QACF,EAAE,EAAE;UACFmC,IAAI,EAAE,CAAC;UACPC,SAAS,EAAE,CAAC;UACZC,GAAG,EAAE,MAAM;UACXL,CAAC,EAAE,CAAC;UACJF,OAAO,EAAE,MAAM;UACfQ,UAAU,EAAE;QACd,CAAE;QAAA,wBAEF,QAAC,KAAK;UACJ,OAAO,EAAC,UAAU;UAClB,EAAE,EAAE;YACFH,IAAI,EAAE,CAAC;YAAE;YACTI,SAAS,EAAE,YAAY;YACvBC,OAAO,EAAE,SAAS;YAClBP,CAAC,EAAE;UACL,CAAE;UAAA,wBAEJ,QAAC,eAAe;YACd,KAAK,EAAE3E,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACkD,MAAM,GAAGzC,QAAQ,CAAC4C,KAAK,GAAG,EAAG;YACvE,MAAM,EAAE5C,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACkD,MAAM,GAAGzC,QAAQ,CAAC0C,MAAM,GAAG,0BAA2B;YACjG,UAAU,EAAE1C,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACkD,MAAM,GAAG,EAAE,GAAG;UAAE;YAAA;YAAA;YAAA;UAAA,QAC/D,eACF,QAAC,SAAS;YAAC,UAAU,EAAE5C,aAAa,KAAKP,aAAa,CAAC6C,MAAM,GAAGtB,mBAAmB,GAAG;UAAE;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA,QACnF,eACR,QAAC,KAAK;UACJ,SAAS,EAAE,CAAE;UACb,EAAE,EAAE;YACFgE,IAAI,EAAE,CAAC;YAAE;YACTM,MAAM,EAAE,MAAM;YACdR,CAAC,EAAE,CAAC;YACJH,OAAO,EAAE,MAAM;YACfC,aAAa,EAAE;UACjB,CAAE;UAAA,uBAEJ,QAAC,SAAS;YACR,OAAO,EAAEzE,QAAQ,CAACE,MAAM,KAAKX,cAAc,CAACkD,MAAM,GAAGzC,QAAQ,CAAC2C,OAAO,GAAG,EAAG;YAC3E,kBAAkB,EAAEhC,kBAAmB;YACvC,mBAAmB,EAAEoC,MAAM,CAACC,IAAI,CAACvC,mBAAmB,CAAC,CAACwC,GAAG,CACvDC,CAAC,IAAIzC,mBAAmB,CAACyC,CAAC,CAAC,CAC3B;YACF,kBAAkB,EAAE9C,kBAAmB;YACvC,gBAAgB,EAAEsD;UAAiB;YAAA;YAAA;YAAA;UAAA;QACnC;UAAA;UAAA;UAAA;QAAA,QACM;MAAA;QAAA;QAAA;QAAA;MAAA,QACJ;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA,gBACL;AAEP;AAAC,GAxQuBlE,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}