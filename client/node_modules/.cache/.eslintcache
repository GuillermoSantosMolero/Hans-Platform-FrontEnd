[{"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\index.js":"1","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\reportWebVitals.js":"2","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\App.jsx":"3","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\SessionLogin.jsx":"4","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\Header.jsx":"5","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\DebugBoardView.jsx":"6","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\SessionView.jsx":"7","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\BoardView.jsx":"8","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\context\\Question.js":"9","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\context\\Session.js":"10","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\StatusView.jsx":"11","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\QuestionDetails.jsx":"12","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\Countdown.jsx":"13","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminLogin.jsx":"14","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminView.jsx":"15","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminInterface.jsx":"16"},{"size":761,"mtime":1683025039581,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1677771117546,"results":"19","hashOfConfig":"18"},{"size":2319,"mtime":1683215815230,"results":"20","hashOfConfig":"18"},{"size":3753,"mtime":1685001618842,"results":"21","hashOfConfig":"18"},{"size":2943,"mtime":1677771117540,"results":"22","hashOfConfig":"18"},{"size":2170,"mtime":1677771117539,"results":"23","hashOfConfig":"18"},{"size":10263,"mtime":1684150662488,"results":"24","hashOfConfig":"18"},{"size":7445,"mtime":1682078332879,"results":"25","hashOfConfig":"18"},{"size":322,"mtime":1677771117543,"results":"26","hashOfConfig":"18"},{"size":4828,"mtime":1685183205675,"results":"27","hashOfConfig":"18"},{"size":2412,"mtime":1677771117542,"results":"28","hashOfConfig":"18"},{"size":518,"mtime":1681283976601,"results":"29","hashOfConfig":"18"},{"size":1363,"mtime":1681397507349,"results":"30","hashOfConfig":"18"},{"size":3679,"mtime":1683218102012,"results":"31","hashOfConfig":"18"},{"size":3468,"mtime":1683709530154,"results":"32","hashOfConfig":"18"},{"size":5831,"mtime":1684153274738,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"steto0",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\index.js",[],[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\reportWebVitals.js",[],[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\App.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\SessionLogin.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\Header.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\DebugBoardView.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\SessionView.jsx",["88","89","90"],[],"import { React, useRef, useState, useEffect } from \"react\";\r\n\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport CountDown from './Countdown';\r\nimport SessionStatusView from './StatusView';\r\nimport QuestionDetails from './QuestionDetails';\r\nimport BoardView from '../BoardView';\r\nimport { Session, SessionStatus } from '../../context/Session';\r\nimport { QuestionStatus } from '../../context/Question';\r\n\r\n\r\nexport default function SessionView({ sessionId, participantId, onLeave = () => { } }) {\r\n  const sessionRef = useRef(null);\r\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\r\n  const [question, setQuestion] = useState({ status: QuestionStatus.Undefined });\r\n  const [userMagnetPosition, setUserMagnetPosition] = useState({ x: 0, y: 0, norm: [] });\r\n  const [peerMagnetPositions, setPeerMagnetPositions] = useState({});\r\n  const [centralCuePosition, setCentralCuePosition] = useState([]);\r\n  const [targetDateCountdown, setTargetDateCountdown] = useState('2023-04-01T00:00:00Z');\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', onLeaveSessionClick);\r\n    fetch(\r\n      `/api/session/${sessionId}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n      }\r\n    ).then(res => {\r\n      if (res.status === 200) {\r\n        res.json().then(data => {\r\n          setSessionStatus(SessionStatus.Waiting);\r\n          if (data.question_id) {\r\n            setQuestion({ status: QuestionStatus.Loading, id: data.question_id });\r\n          }\r\n        });\r\n      } else {\r\n        res.text().then(msg => console.log(msg));\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n\r\n    sessionRef.current = new Session(sessionId, participantId,\r\n      (controlMessage) => {\r\n        switch (controlMessage.type) {\r\n          case 'setup': {\r\n            if (controlMessage.question_id === null) {\r\n              setQuestion({ status: QuestionStatus.Undefined });\r\n            } else {\r\n              setQuestion({\r\n                status: QuestionStatus.Loading,\r\n                id: controlMessage.question_id\r\n              });\r\n            }\r\n            break;\r\n          }\r\n          case 'start': {\r\n            setSessionStatus(SessionStatus.Active);\r\n            setTargetDateCountdown((controlMessage.targetDate + 13))\r\n            break;\r\n          }\r\n          case 'started': {\r\n            setSessionStatus(SessionStatus.Active);\r\n            setTargetDateCountdown((controlMessage.targetDate + 13))\r\n            let positions = JSON.parse(controlMessage.positions);\r\n            if (peerMagnetPositions.length !== 0) {\r\n              for (const participant in positions) {\r\n                let usablePeerPositions = positions[participant].slice(positions[participant].indexOf('Z') + 2).split(',').map(parseFloat);\r\n                if(participant !== participantId){\r\n                  setPeerMagnetPositions((peerPositions) => {\r\n                    return {\r\n                      ...peerPositions,\r\n                      [participant]: usablePeerPositions\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case 'stop': {\r\n            setSessionStatus(SessionStatus.Waiting);\r\n            setUserMagnetPosition({ x: 0, y: 0, norm: [] })\r\n            setPeerMagnetPositions({});\r\n            break;\r\n          }\r\n          default: break;\r\n        }\r\n      },\r\n      (participantId, updateMessage) => {\r\n        setPeerMagnetPositions((peerPositions) => {\r\n          console.log(peerPositions)\r\n          return {\r\n            ...peerPositions,\r\n            [participantId]: updateMessage.data.position\r\n          }\r\n        });\r\n      }\r\n      );\r\n  }, [sessionId, participantId]);\r\n\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    if (question.status === QuestionStatus.Loading) {\r\n      fetch(\r\n        `/api/question/${question.id}`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n          },\r\n        }\r\n      ).then(res => {\r\n        if (res.status === 200) {\r\n          res.json().then(data => {\r\n            if (!ignore) {\r\n              setQuestion({\r\n                status: QuestionStatus.Loaded,\r\n                id: data.id,\r\n                prompt: data.prompt,\r\n                answers: data.answers,\r\n                image: `/api/question/${data.id}/image`,\r\n              });\r\n              sessionRef.current.publishControl({ type: 'ready' , participant: participantId, session: sessionId});\r\n            }\r\n          });\r\n        } else {\r\n          res.text().then(msg => console.log(msg));\r\n        }\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n    return () => { ignore = true };\r\n  }, [question]);\r\n\r\n  useEffect(() => {\r\n    // Update central Cue based on magnet positions\r\n    if (peerMagnetPositions && peerMagnetPositions.length !== 0) {\r\n      const usablePeerPositions = Object.keys(peerMagnetPositions).map(\r\n        k => peerMagnetPositions[k]\r\n      ).filter(peerPosition => peerPosition.length === question.answers.length);\r\n      setCentralCuePosition(\r\n        usablePeerPositions.reduce(\r\n          (cuePosition, peerPosition) => cuePosition.map(\r\n            (value, i) => value + peerPosition[i]\r\n          ),\r\n          userMagnetPosition.norm\r\n        ).map(value => value / (1 + usablePeerPositions.length))\r\n      );\r\n    }\r\n  }, [userMagnetPosition, peerMagnetPositions])\r\n\r\n  // DEBUG-ONLY\r\n  /*useEffect(() => {\r\n    // The component was drawn for the first time, configure a 1-second interval to simulate peer updates\r\n    const interval = setInterval(() => {\r\n      setPeerMagnetPositions(peerPositions => peerPositions.map(\r\n        peerPosition => \r\n          ((question.status === QuestionStatus.Loaded) && (peerPosition.length !== question.answers.length))\r\n          ? new Array(question.answers.length).fill(0).map(_ => Math.random())\r\n          : peerPosition.map(\r\n            value => Math.min(1.1, Math.max(0, value + (Math.random() - 0.5) * 0.1))\r\n          )\r\n      ));\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [question]);*/\r\n\r\n  const onUserMagnetMove = (position) => {\r\n    if (sessionStatus !== SessionStatus.Active) return;\r\n    let sumPositions = 0\r\n    for (let i = 0; i < position.norm.length; i++)\r\n      sumPositions += position.norm[i];\r\n    if (sumPositions > 1) {\r\n      for (let i = 0; i < position.norm.length; i++)\r\n        position.norm[i] = position.norm[i] / sumPositions;\r\n    }\r\n    setUserMagnetPosition(position);\r\n    const tiempoTranscurrido = Date.now();\r\n    const hoy = new Date(tiempoTranscurrido);\r\n    sessionRef.current.publishUpdate({ data: { position: position.norm, timeStamp: hoy.toISOString() } });\r\n  };\r\n\r\n  const onLeaveSessionClick = () => {\r\n    // TODO: User should double-check the intention to logout (showing a modal when the leave/logout button is pressed)\r\n    // TODO: The server should be notified about the user leaving the session:\r\n    //sessionRef.current.leave()\r\n    fetch(\r\n      `/api/session/${sessionId}/participants/${participantId}`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    ).then(res => {\r\n      if (res.status === 200) {\r\n        res.json().then(data => {\r\n        });\r\n      } else {\r\n      }\r\n    }).catch(error => {\r\n    });\r\n    onLeave();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={sessionStatus !== SessionStatus.Active}\r\n      >\r\n        <SessionStatusView\r\n          sessionId={sessionId}\r\n          sessionStatus={sessionStatus}\r\n          questionStatus={question.status}\r\n          onLeaveClick={onLeaveSessionClick}\r\n        />\r\n      </Backdrop>\r\n      <Box\r\n        component=\"main\"\r\n        height='100vh'\r\n        sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <Paper\r\n          component=\"header\"\r\n          elevation={2}\r\n          sx={{\r\n            m: 1,\r\n            p: 1,\r\n            borderRadius: 2\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h4\" textAlign='center'>\r\n            {question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\"}\r\n          </Typography>\r\n        </Paper>\r\n        <Box\r\n          sx={{\r\n            flex: 1,\r\n            minHeight: 0,\r\n            gap: '10px',\r\n            m: 1,\r\n            display: 'flex',\r\n            alignItems: 'stretch',\r\n          }}\r\n        >\r\n          <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n              flex: 1, /* grow: 1, shrink: 1, basis: 0*/\r\n              alignSelf: 'flex-start',\r\n              bgcolor: '#EEEEEE',\r\n              p: 1,\r\n            }}\r\n          >\r\n            <QuestionDetails\r\n              image={question.status === QuestionStatus.Loaded ? question.image : \"\"}\r\n              prompt={question.status === QuestionStatus.Loaded ? question.prompt : \"Question not defined yet\"}\r\n            />\r\n            {sessionStatus === SessionStatus.Active && <CountDown targetDate={targetDateCountdown} />}\r\n          </Paper>\r\n          <Paper\r\n            elevation={2}\r\n            sx={{\r\n              flex: 2, // grow: 2, shrink: 2, basis: 0\r\n              height: '100%',\r\n              p: 1,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n            }}\r\n          >\r\n            <BoardView\r\n              answers={question.status === QuestionStatus.Loaded ? question.answers : []}\r\n              centralCuePosition={centralCuePosition}\r\n              peerMagnetPositions={peerMagnetPositions && Object.keys(peerMagnetPositions).map(\r\n                k => peerMagnetPositions[k]\r\n              )}\r\n              userMagnetPosition={userMagnetPosition}\r\n              onUserMagnetMove={onUserMagnetMove}\r\n            />\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\BoardView.jsx",[],[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\context\\Question.js",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\context\\Session.js",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\StatusView.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\QuestionDetails.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\session\\Countdown.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminLogin.jsx",[],[],"C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminView.jsx",["91"],[],"import { React, useState, useEffect } from \"react\";\r\n\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nimport AdminLogin from './AdminLogin.jsx';\r\nimport AdminInterface from './AdminInterface.jsx';\r\n\r\nexport default function AdminView() {\r\n    const [username, setUsername] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [status, setStatus] = useState(null);\r\n    const [sessions, setSessions] = useState(null);\r\n    const [questions, setQuestions] = useState(null);\r\n    const joinSession = (username, password, status) => {\r\n        setUsername(username);\r\n        setPassword(password);\r\n        setStatus(status);\r\n    };\r\n    useEffect(() => {\r\n        if (status != null) {\r\n            fetch(\r\n                `/api/session`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            user: username,\r\n                            pass: password\r\n                        }\r\n                    )\r\n                }\r\n            ).then(res => {\r\n                if (res.status === 200) {\r\n                    res.json().then(data => {\r\n                        setSessions(data);\r\n                    });\r\n                } else {\r\n                    res.text().then(msg => console.log(msg));\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n            fetch(\r\n                `/api/question`,\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                    }\r\n                }\r\n            ).then(res => {\r\n                if (res.status === 200) {\r\n                    res.json().then(data => {\r\n                        setQuestions(data);\r\n                    });\r\n                } else {\r\n                    res.text().then(msg => console.log(msg));\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n\r\n        }\r\n    }, [status]);\r\n    \r\n    const handleSessionCreated = (newSession) => {\r\n        setSessions([...sessions, newSession]);\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"l\">\r\n            <Backdrop\r\n                sx={{\r\n                    backgroundColor: 'white',\r\n                    zIndex: (theme) => theme.zIndex.drawer + 1,\r\n                }}\r\n                open={status == null}\r\n            >\r\n                <AdminLogin\r\n                    onJoinSession={joinSession}\r\n                />\r\n            </Backdrop>\r\n\r\n            <Box\r\n                component=\"main\"\r\n                height='100vh'\r\n                sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                }}\r\n            >\r\n                <AdminInterface\r\n                    username={username}\r\n                    password={password}\r\n                    questions={questions}\r\n                    sessions={sessions}\r\n                    onSessionCreated={handleSessionCreated}\r\n                ></AdminInterface>\r\n            </Box>\r\n        </Container>\r\n\r\n\r\n    );\r\n}","C:\\VISILAB\\Hans\\HANS-Platform\\client\\src\\components\\admin\\AdminInterface.jsx",["92","93","94","95","96","97","98","99","100"],[],"import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport './AdminInterface.css';\r\nimport { Session, SessionStatus } from '../../context/Session';\r\nimport { QuestionStatus } from '../../context/Question';\r\n\r\nexport default function AdminInterface({ username, password, questions, sessions, onSessionCreated }) {\r\n  const [selectedSession, setSelectedSession] = useState({ id: 0, duration: 0, question_id: \"\", status: \"\" });\r\n  const [participantList, setParticipantList] = useState(null);\r\n  const [currentSession, setCurrentSession] = useState(null);\r\n  const [sessionStatus, setSessionStatus] = useState(SessionStatus.Joining);\r\n  const [question, setQuestion] = useState({ status: QuestionStatus.Undefined });\r\n  const [targetDateCountdown, setTargetDateCountdown] = useState('2023-04-01T00:00:00Z');\r\n  const [waitingCountDown, setWaitingCountDown] = useState(false);\r\n  let timerId;\r\n  useEffect(() => {\r\n    if (sessions) {\r\n      setSelectedSession(sessions[0]);\r\n      if (questions)\r\n        setSelectedSession({ ...selectedSession, question_id: questions[0].id })\r\n    }\r\n  }, [questions]);\r\n\r\n  useEffect(() => {\r\n    if (selectedSession.id !== 0) {\r\n      getParticipantsBySession();\r\n      setCurrentSession(new Session(selectedSession.id, 0,\r\n        (controlMessage) => {\r\n          if (controlMessage.participant !== 0) {\r\n            if (selectedSession.id === controlMessage.session)\r\n              switch (controlMessage.type) {\r\n                case 'join':\r\n                  getParticipantsBySession();\r\n                  break;\r\n                case 'ready':\r\n                  getParticipantsBySession();\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n          }\r\n        }\r\n      ));\r\n    }\r\n  }, [selectedSession.id]);\r\n\r\n  const getParticipantsBySession = () => {\r\n    fetch(\r\n      `/api/session/${selectedSession.id}/allParticipants`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        )\r\n      }\r\n    ).then(res => {\r\n      if (res.status === 200) {\r\n        res.json().then(data => {\r\n          setParticipantList(data);\r\n        });\r\n      } else {\r\n        res.text().then(msg => console.log(msg));\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  const handleSessionChange = (event) => {\r\n    const sessionId = parseInt(event.target.value);\r\n    const session = sessions.find(s => s.id === sessionId);\r\n    session.question_id = selectedSession.question_id;\r\n    session.duration = selectedSession.duration;\r\n    setSelectedSession(session);\r\n  }\r\n  const handleQuestionChange = (event) => {\r\n    setSelectedSession({ ...selectedSession, question_id: event.target.value });\r\n    currentSession.publishControl({ type: 'setup', question_id: event.target.value });\r\n    getParticipantsBySession();\r\n  }\r\n\r\n  const startSession = (event) => {\r\n    currentSession.publishControl({ type: 'start', targetDate: Date.now() + selectedSession.duration * 1000 });\r\n    waitOrCloseSession();\r\n  }\r\n  const waitOrCloseSession = () => {\r\n    if(!waitingCountDown) {\r\n      setWaitingCountDown(true);\r\n      timerId = setTimeout(() => {\r\n        currentSession.publishControl({ type: 'stop' });\r\n        setWaitingCountDown(false);\r\n      }, selectedSession.duration * 1000);\r\n    } else{\r\n      clearTimeout(timerId);\r\n      currentSession.publishControl({ type: 'stop' });\r\n      setWaitingCountDown(false);\r\n    }\r\n  }\r\n  const createSession = (event) => {\r\n    fetch(\r\n      `/api/createSession`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        )\r\n      }\r\n    ).then(res => {\r\n      if (res.status === 200) {\r\n        res.json().then(data => {\r\n          onSessionCreated(data);\r\n        });\r\n      } else {\r\n        res.text().then(msg => console.log(msg));\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"sessionlist\">\r\n\r\n        <select onChange={handleSessionChange}>\r\n          {sessions && sessions.map(session => (\r\n            <option key={session.id} value={session.id}>Session {session.id}</option>\r\n          ))}\r\n        </select>\r\n        <button onClick={createSession}>New Session</button>\r\n      </div>\r\n      <div className=\"sessiondetails\">\r\n        <label>Id:</label>\r\n        <input type=\"text\" readOnly value={selectedSession && selectedSession.id} />\r\n        <label>Duration:</label>\r\n        <input type=\"text\" value={selectedSession ? selectedSession.duration : \"\"} onChange={e => setSelectedSession({ ...selectedSession, duration: e.target.value })} />\r\n        <label>Question:</label>\r\n        <select onChange={handleQuestionChange}>\r\n          {questions && questions.map(question => (\r\n            <option key={question.id} value={question.id}>{question.prompt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"startsession\" >\r\n        <button onClick={startSession}>{waitingCountDown ? \"Stop\" : \"Start\"}</button>\r\n        <label>Ready: {participantList ? participantList.filter(participant => participant.status === 'ready').length : 0}/{participantList ? participantList.length : 0}</label>\r\n        <textarea className=\"inputParticipant\" readOnly value={participantList ? participantList.map(p => `${p.username} -> ${p.status}`).join(\"\\n\") : \"Sin participantes todavía\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}",{"ruleId":"101","severity":1,"message":"102","line":108,"column":6,"nodeType":"103","endLine":108,"endColumn":32,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":143,"column":6,"nodeType":"103","endLine":143,"endColumn":16,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":160,"column":6,"nodeType":"103","endLine":160,"endColumn":47,"suggestions":"108"},{"ruleId":"101","severity":1,"message":"109","line":72,"column":8,"nodeType":"103","endLine":72,"endColumn":16,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"115","line":11,"column":10,"nodeType":"113","messageId":"114","endLine":11,"endColumn":23},{"ruleId":"111","severity":1,"message":"116","line":11,"column":25,"nodeType":"113","messageId":"114","endLine":11,"endColumn":41},{"ruleId":"111","severity":1,"message":"117","line":12,"column":10,"nodeType":"113","messageId":"114","endLine":12,"endColumn":18},{"ruleId":"111","severity":1,"message":"118","line":12,"column":20,"nodeType":"113","messageId":"114","endLine":12,"endColumn":31},{"ruleId":"111","severity":1,"message":"119","line":13,"column":10,"nodeType":"113","messageId":"114","endLine":13,"endColumn":29},{"ruleId":"111","severity":1,"message":"120","line":13,"column":31,"nodeType":"113","messageId":"114","endLine":13,"endColumn":53},{"ruleId":"101","severity":1,"message":"121","line":22,"column":6,"nodeType":"103","endLine":22,"endColumn":17,"suggestions":"122"},{"ruleId":"101","severity":1,"message":"123","line":45,"column":6,"nodeType":"103","endLine":45,"endColumn":26,"suggestions":"124"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onLeaveSessionClick' and 'peerMagnetPositions.length'. Either include them or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has missing dependencies: 'participantId' and 'sessionId'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'question.answers.length'. Either include it or remove the dependency array.",["127"],"React Hook useEffect has missing dependencies: 'password' and 'username'. Either include them or remove the dependency array.",["128"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'sessionStatus' is assigned a value but never used.","'setSessionStatus' is assigned a value but never used.","'question' is assigned a value but never used.","'setQuestion' is assigned a value but never used.","'targetDateCountdown' is assigned a value but never used.","'setTargetDateCountdown' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'selectedSession' and 'sessions'. Either include them or remove the dependency array. If 'setSelectedSession' needs the current value of 'sessions', you can also switch to useReducer instead of useState and read 'sessions' in the reducer.",["129"],"React Hook useEffect has a missing dependency: 'getParticipantsBySession'. Either include it or remove the dependency array.",["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [sessionId, participantId, onLeaveSessionClick, peerMagnetPositions.length]",{"range":"143","text":"144"},"Update the dependencies array to be: [participantId, question, sessionId]",{"range":"145","text":"146"},"Update the dependencies array to be: [userMagnetPosition, peerMagnetPositions, question.answers.length]",{"range":"147","text":"148"},"Update the dependencies array to be: [password, status, username]",{"range":"149","text":"150"},"Update the dependencies array to be: [questions, selectedSession, sessions]",{"range":"151","text":"152"},"Update the dependencies array to be: [getParticipantsBySession, selectedSession.id]",{"range":"153","text":"154"},[3912,3938],"[sessionId, participantId, onLeaveSessionClick, peerMagnetPositions.length]",[4957,4967],"[participantId, question, sessionId]",[5621,5662],"[userMagnetPosition, peerMagnetPositions, question.answers.length]",[2343,2351],"[password, status, username]",[1099,1110],"[questions, selectedSession, sessions]",[1784,1804],"[getParticipantsBySession, selectedSession.id]"]